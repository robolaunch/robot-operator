apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: robot-operator
    control-plane: controller-manager
  name: robot-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: robot-system/robot-serving-cert
    controller-gen.kubebuilder.io/version: v0.9.2
  name: buildmanagers.robot.roboscale.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: robot-webhook-service
          namespace: robot-system
          path: /convert
      conversionReviewVersions:
        - v1
  group: robot.roboscale.io
  names:
    kind: BuildManager
    listKind: BuildManagerList
    plural: buildmanagers
    singular: buildmanager
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.steps[].name
          name: Steps
          type: string
        - jsonPath: .status.phase
          name: Phase
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: BuildManager is the Schema for the buildmanagers API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired behavior of the BuildManager.
              properties:
                steps:
                  description: Defines the building steps.
                  items:
                    description: Step is a command or script to execute when building a robot. Either `command` or `script` should be specified for each step.
                    properties:
                      command:
                        description: Bash command to run. Assume that your command will be `/bin/bash -c <COMMAND>`. Use logical operators (eg. `&&`) and pipes if the multiple dependent commands will be executed.
                        type: string
                      env:
                        description: Environment variables for step.
                        items:
                          description: EnvVar represents an environment variable present in a Container.
                          properties:
                            name:
                              description: Name of the environment variable. Must be a C_IDENTIFIER.
                              type: string
                            value:
                              description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                              type: string
                            valueFrom:
                              description: Source for the environment variable's value. Cannot be used if value is not empty.
                              properties:
                                configMapKeyRef:
                                  description: Selects a key of a ConfigMap.
                                  properties:
                                    key:
                                      description: The key to select.
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                      type: string
                                    optional:
                                      description: Specify whether the ConfigMap or its key must be defined
                                      type: boolean
                                  required:
                                    - key
                                  type: object
                                  x-kubernetes-map-type: atomic
                                fieldRef:
                                  description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                                  properties:
                                    apiVersion:
                                      description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                      type: string
                                    fieldPath:
                                      description: Path of the field to select in the specified API version.
                                      type: string
                                  required:
                                    - fieldPath
                                  type: object
                                  x-kubernetes-map-type: atomic
                                resourceFieldRef:
                                  description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                                  properties:
                                    containerName:
                                      description: 'Container name: required for volumes, optional for env vars'
                                      type: string
                                    divisor:
                                      anyOf:
                                        - type: integer
                                        - type: string
                                      description: Specifies the output format of the exposed resources, defaults to "1"
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    resource:
                                      description: 'Required: resource to select'
                                      type: string
                                  required:
                                    - resource
                                  type: object
                                  x-kubernetes-map-type: atomic
                                secretKeyRef:
                                  description: Selects a key of a secret in the pod's namespace
                                  properties:
                                    key:
                                      description: The key of the secret to select from.  Must be a valid secret key.
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                      type: string
                                    optional:
                                      description: Specify whether the Secret or its key must be defined
                                      type: boolean
                                  required:
                                    - key
                                  type: object
                                  x-kubernetes-map-type: atomic
                              type: object
                          required:
                            - name
                          type: object
                        type: array
                      instances:
                        description: Cluster selector. If the current instance name is on the list, BuildManager creates building jobs.
                        items:
                          type: string
                        type: array
                      name:
                        description: Name of the step.
                        type: string
                      scope:
                        description: Selects the scope for BuildManager step.
                        properties:
                          path:
                            description: Absolute path of the directory. It's being applied if the scope type is `Path`.
                            type: string
                          scopeType:
                            description: Type of the scope. Allowed scopes are `Workspace` and `Path`.
                            enum:
                              - Workspace
                              - Path
                            type: string
                          workspace:
                            description: Name of the workspace. Should be selected among the existing workspaces in WorkspaceManager's manifests. It's being applied if the scope type is `Workspace`.
                            type: string
                        required:
                          - scopeType
                        type: object
                      script:
                        description: Bash script to run.
                        type: string
                    required:
                      - name
                      - scope
                    type: object
                  type: array
              type: object
            status:
              description: Most recently observed status of the BuildManager.
              properties:
                active:
                  description: Indicates if the BuildManager is currently executing it's jobs.
                  type: boolean
                phase:
                  description: Phase of BuildManager.
                  type: string
                scriptConfigMapStatus:
                  description: Status of the ConfigMap that holds scripts. If a script is specified inside `.spec.steps[k]`, they are mounted to the step jobs via this ConfigMap.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                steps:
                  description: Statuses of the build steps.
                  items:
                    properties:
                      resource:
                        description: Generic status for any owned resource.
                        properties:
                          created:
                            description: Shows if the owned resource is created.
                            type: boolean
                          phase:
                            description: Phase of the owned resource.
                            type: string
                          reference:
                            description: Reference to the owned resource.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                          - created
                        type: object
                      step:
                        description: Status of the step.
                        properties:
                          command:
                            description: Bash command to run. Assume that your command will be `/bin/bash -c <COMMAND>`. Use logical operators (eg. `&&`) and pipes if the multiple dependent commands will be executed.
                            type: string
                          env:
                            description: Environment variables for step.
                            items:
                              description: EnvVar represents an environment variable present in a Container.
                              properties:
                                name:
                                  description: Name of the environment variable. Must be a C_IDENTIFIER.
                                  type: string
                                value:
                                  description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                                  type: string
                                valueFrom:
                                  description: Source for the environment variable's value. Cannot be used if value is not empty.
                                  properties:
                                    configMapKeyRef:
                                      description: Selects a key of a ConfigMap.
                                      properties:
                                        key:
                                          description: The key to select.
                                          type: string
                                        name:
                                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                          type: string
                                        optional:
                                          description: Specify whether the ConfigMap or its key must be defined
                                          type: boolean
                                      required:
                                        - key
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    fieldRef:
                                      description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                                      properties:
                                        apiVersion:
                                          description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                          type: string
                                        fieldPath:
                                          description: Path of the field to select in the specified API version.
                                          type: string
                                      required:
                                        - fieldPath
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    resourceFieldRef:
                                      description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                                      properties:
                                        containerName:
                                          description: 'Container name: required for volumes, optional for env vars'
                                          type: string
                                        divisor:
                                          anyOf:
                                            - type: integer
                                            - type: string
                                          description: Specifies the output format of the exposed resources, defaults to "1"
                                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                          x-kubernetes-int-or-string: true
                                        resource:
                                          description: 'Required: resource to select'
                                          type: string
                                      required:
                                        - resource
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    secretKeyRef:
                                      description: Selects a key of a secret in the pod's namespace
                                      properties:
                                        key:
                                          description: The key of the secret to select from.  Must be a valid secret key.
                                          type: string
                                        name:
                                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                          type: string
                                        optional:
                                          description: Specify whether the Secret or its key must be defined
                                          type: boolean
                                      required:
                                        - key
                                      type: object
                                      x-kubernetes-map-type: atomic
                                  type: object
                              required:
                                - name
                              type: object
                            type: array
                          instances:
                            description: Cluster selector. If the current instance name is on the list, BuildManager creates building jobs.
                            items:
                              type: string
                            type: array
                          name:
                            description: Name of the step.
                            type: string
                          scope:
                            description: Selects the scope for BuildManager step.
                            properties:
                              path:
                                description: Absolute path of the directory. It's being applied if the scope type is `Path`.
                                type: string
                              scopeType:
                                description: Type of the scope. Allowed scopes are `Workspace` and `Path`.
                                enum:
                                  - Workspace
                                  - Path
                                type: string
                              workspace:
                                description: Name of the workspace. Should be selected among the existing workspaces in WorkspaceManager's manifests. It's being applied if the scope type is `Workspace`.
                                type: string
                            required:
                              - scopeType
                            type: object
                          script:
                            description: Bash script to run.
                            type: string
                        required:
                          - name
                          - scope
                        type: object
                    type: object
                  type: array
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: codeeditors.robot.roboscale.io
spec:
  group: robot.roboscale.io
  names:
    kind: CodeEditor
    listKind: CodeEditorList
    plural: codeeditors
    singular: codeeditor
  scope: Namespaced
  versions:
    - name: v1alpha2
      schema:
        openAPIV3Schema:
          description: CodeEditor is the Schema for the codeeditors API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired behavior of the CodeEditor.
              properties:
                container:
                  description: Configurational parameters for code editor container.
                  properties:
                    securityContext:
                      description: Security context of the code editor container.
                      properties:
                        allowPrivilegeEscalation:
                          description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.'
                          type: boolean
                        capabilities:
                          description: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
                          properties:
                            add:
                              description: Added capabilities
                              items:
                                description: Capability represent POSIX capabilities type
                                type: string
                              type: array
                            drop:
                              description: Removed capabilities
                              items:
                                description: Capability represent POSIX capabilities type
                                type: string
                              type: array
                          type: object
                        privileged:
                          description: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
                          type: boolean
                        procMount:
                          description: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
                          type: string
                        readOnlyRootFilesystem:
                          description: Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
                          type: boolean
                        runAsGroup:
                          description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                          format: int64
                          type: integer
                        runAsNonRoot:
                          description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                          type: boolean
                        runAsUser:
                          description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                          format: int64
                          type: integer
                        seLinuxOptions:
                          description: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                          properties:
                            level:
                              description: Level is SELinux level label that applies to the container.
                              type: string
                            role:
                              description: Role is a SELinux role label that applies to the container.
                              type: string
                            type:
                              description: Type is a SELinux type label that applies to the container.
                              type: string
                            user:
                              description: User is a SELinux user label that applies to the container.
                              type: string
                          type: object
                        seccompProfile:
                          description: The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
                          properties:
                            localhostProfile:
                              description: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
                              type: string
                            type:
                              description: "type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied."
                              type: string
                          required:
                            - type
                          type: object
                        windowsOptions:
                          description: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
                          properties:
                            gmsaCredentialSpec:
                              description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
                              type: string
                            gmsaCredentialSpecName:
                              description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
                              type: string
                            hostProcess:
                              description: HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
                              type: boolean
                            runAsUserName:
                              description: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                              type: string
                          type: object
                      type: object
                    volumeMounts:
                      description: Mounted volumes of the code editor container.
                      items:
                        description: VolumeMount describes a mounting of a Volume within a container.
                        properties:
                          mountPath:
                            description: Path within the container at which the volume should be mounted.  Must not contain ':'.
                            type: string
                          mountPropagation:
                            description: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
                            type: string
                          name:
                            description: This must match the Name of a Volume.
                            type: string
                          readOnly:
                            description: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
                            type: boolean
                          subPath:
                            description: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
                            type: string
                          subPathExpr:
                            description: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
                            type: string
                        required:
                          - mountPath
                          - name
                        type: object
                      type: array
                  type: object
                externalVolumes:
                  description: External volumes.
                  items:
                    description: Volume represents a named volume in a pod that may be accessed by any container in the pod.
                    properties:
                      awsElasticBlockStore:
                        description: 'awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                        properties:
                          fsType:
                            description: 'fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine'
                            type: string
                          partition:
                            description: 'partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).'
                            format: int32
                            type: integer
                          readOnly:
                            description: 'readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                            type: boolean
                          volumeID:
                            description: 'volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                            type: string
                        required:
                          - volumeID
                        type: object
                      azureDisk:
                        description: azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
                        properties:
                          cachingMode:
                            description: 'cachingMode is the Host Caching mode: None, Read Only, Read Write.'
                            type: string
                          diskName:
                            description: diskName is the Name of the data disk in the blob storage
                            type: string
                          diskURI:
                            description: diskURI is the URI of data disk in the blob storage
                            type: string
                          fsType:
                            description: fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                            type: string
                          kind:
                            description: 'kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared'
                            type: string
                          readOnly:
                            description: readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                            type: boolean
                        required:
                          - diskName
                          - diskURI
                        type: object
                      azureFile:
                        description: azureFile represents an Azure File Service mount on the host and bind mount to the pod.
                        properties:
                          readOnly:
                            description: readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                            type: boolean
                          secretName:
                            description: secretName is the  name of secret that contains Azure Storage Account Name and Key
                            type: string
                          shareName:
                            description: shareName is the azure share Name
                            type: string
                        required:
                          - secretName
                          - shareName
                        type: object
                      cephfs:
                        description: cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
                        properties:
                          monitors:
                            description: 'monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                            items:
                              type: string
                            type: array
                          path:
                            description: 'path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /'
                            type: string
                          readOnly:
                            description: 'readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                            type: boolean
                          secretFile:
                            description: 'secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                            type: string
                          secretRef:
                            description: 'secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                            properties:
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          user:
                            description: 'user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                            type: string
                        required:
                          - monitors
                        type: object
                      cinder:
                        description: 'cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                        properties:
                          fsType:
                            description: 'fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                            type: string
                          readOnly:
                            description: 'readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                            type: boolean
                          secretRef:
                            description: 'secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.'
                            properties:
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          volumeID:
                            description: 'volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                            type: string
                        required:
                          - volumeID
                        type: object
                      configMap:
                        description: configMap represents a configMap that should populate this volume
                        properties:
                          defaultMode:
                            description: 'defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                            format: int32
                            type: integer
                          items:
                            description: items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                            items:
                              description: Maps a string key to a path within a volume.
                              properties:
                                key:
                                  description: key is the key to project.
                                  type: string
                                mode:
                                  description: 'mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                  format: int32
                                  type: integer
                                path:
                                  description: path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                                  type: string
                              required:
                                - key
                                - path
                              type: object
                            type: array
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                          optional:
                            description: optional specify whether the ConfigMap or its keys must be defined
                            type: boolean
                        type: object
                        x-kubernetes-map-type: atomic
                      csi:
                        description: csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
                        properties:
                          driver:
                            description: driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
                            type: string
                          fsType:
                            description: fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
                            type: string
                          nodePublishSecretRef:
                            description: nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
                            properties:
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          readOnly:
                            description: readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
                            type: boolean
                          volumeAttributes:
                            additionalProperties:
                              type: string
                            description: volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
                            type: object
                        required:
                          - driver
                        type: object
                      downwardAPI:
                        description: downwardAPI represents downward API about the pod that should populate this volume
                        properties:
                          defaultMode:
                            description: 'Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                            format: int32
                            type: integer
                          items:
                            description: Items is a list of downward API volume file
                            items:
                              description: DownwardAPIVolumeFile represents information to create the file containing the pod field
                              properties:
                                fieldRef:
                                  description: 'Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.'
                                  properties:
                                    apiVersion:
                                      description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                      type: string
                                    fieldPath:
                                      description: Path of the field to select in the specified API version.
                                      type: string
                                  required:
                                    - fieldPath
                                  type: object
                                  x-kubernetes-map-type: atomic
                                mode:
                                  description: 'Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                  format: int32
                                  type: integer
                                path:
                                  description: 'Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the ''..'' path. Must be utf-8 encoded. The first item of the relative path must not start with ''..'''
                                  type: string
                                resourceFieldRef:
                                  description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.'
                                  properties:
                                    containerName:
                                      description: 'Container name: required for volumes, optional for env vars'
                                      type: string
                                    divisor:
                                      anyOf:
                                        - type: integer
                                        - type: string
                                      description: Specifies the output format of the exposed resources, defaults to "1"
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    resource:
                                      description: 'Required: resource to select'
                                      type: string
                                  required:
                                    - resource
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                                - path
                              type: object
                            type: array
                        type: object
                      emptyDir:
                        description: 'emptyDir represents a temporary directory that shares a pod''s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                        properties:
                          medium:
                            description: 'medium represents what type of storage medium should back this directory. The default is "" which means to use the node''s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                            type: string
                          sizeLimit:
                            anyOf:
                              - type: integer
                              - type: string
                            description: 'sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir'
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                        type: object
                      ephemeral:
                        description: "ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. \n Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). \n Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. \n Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. \n A pod can use both types of ephemeral volumes and persistent volumes at the same time."
                        properties:
                          volumeClaimTemplate:
                            description: "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). \n An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. \n This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. \n Required, must not be nil."
                            properties:
                              metadata:
                                description: May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
                                type: object
                              spec:
                                description: The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
                                properties:
                                  accessModes:
                                    description: 'accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                                    items:
                                      type: string
                                    type: array
                                  dataSource:
                                    description: 'dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.'
                                    properties:
                                      apiGroup:
                                        description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                                        type: string
                                      kind:
                                        description: Kind is the type of resource being referenced
                                        type: string
                                      name:
                                        description: Name is the name of resource being referenced
                                        type: string
                                    required:
                                      - kind
                                      - name
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  dataSourceRef:
                                    description: 'dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn''t specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn''t set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.'
                                    properties:
                                      apiGroup:
                                        description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                                        type: string
                                      kind:
                                        description: Kind is the type of resource being referenced
                                        type: string
                                      name:
                                        description: Name is the name of resource being referenced
                                        type: string
                                      namespace:
                                        description: Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                        type: string
                                    required:
                                      - kind
                                      - name
                                    type: object
                                  resources:
                                    description: 'resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                                    properties:
                                      claims:
                                        description: "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable."
                                        items:
                                          description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                                          properties:
                                            name:
                                              description: Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
                                              type: string
                                          required:
                                            - name
                                          type: object
                                        type: array
                                        x-kubernetes-list-map-keys:
                                          - name
                                        x-kubernetes-list-type: map
                                      limits:
                                        additionalProperties:
                                          anyOf:
                                            - type: integer
                                            - type: string
                                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                          x-kubernetes-int-or-string: true
                                        description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                        type: object
                                      requests:
                                        additionalProperties:
                                          anyOf:
                                            - type: integer
                                            - type: string
                                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                          x-kubernetes-int-or-string: true
                                        description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                        type: object
                                    type: object
                                  selector:
                                    description: selector is a label query over volumes to consider for binding.
                                    properties:
                                      matchExpressions:
                                        description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                        items:
                                          description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                          properties:
                                            key:
                                              description: key is the label key that the selector applies to.
                                              type: string
                                            operator:
                                              description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                              type: string
                                            values:
                                              description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                              items:
                                                type: string
                                              type: array
                                          required:
                                            - key
                                            - operator
                                          type: object
                                        type: array
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  storageClassName:
                                    description: 'storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                                    type: string
                                  volumeMode:
                                    description: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
                                    type: string
                                  volumeName:
                                    description: volumeName is the binding reference to the PersistentVolume backing this claim.
                                    type: string
                                type: object
                            required:
                              - spec
                            type: object
                        type: object
                      fc:
                        description: fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
                        properties:
                          fsType:
                            description: 'fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine'
                            type: string
                          lun:
                            description: 'lun is Optional: FC target lun number'
                            format: int32
                            type: integer
                          readOnly:
                            description: 'readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.'
                            type: boolean
                          targetWWNs:
                            description: 'targetWWNs is Optional: FC target worldwide names (WWNs)'
                            items:
                              type: string
                            type: array
                          wwids:
                            description: 'wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.'
                            items:
                              type: string
                            type: array
                        type: object
                      flexVolume:
                        description: flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
                        properties:
                          driver:
                            description: driver is the name of the driver to use for this volume.
                            type: string
                          fsType:
                            description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
                            type: string
                          options:
                            additionalProperties:
                              type: string
                            description: 'options is Optional: this field holds extra command options if any.'
                            type: object
                          readOnly:
                            description: 'readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.'
                            type: boolean
                          secretRef:
                            description: 'secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.'
                            properties:
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                          - driver
                        type: object
                      flocker:
                        description: flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
                        properties:
                          datasetName:
                            description: datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
                            type: string
                          datasetUUID:
                            description: datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
                            type: string
                        type: object
                      gcePersistentDisk:
                        description: 'gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                        properties:
                          fsType:
                            description: 'fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine'
                            type: string
                          partition:
                            description: 'partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                            format: int32
                            type: integer
                          pdName:
                            description: 'pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                            type: string
                          readOnly:
                            description: 'readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                            type: boolean
                        required:
                          - pdName
                        type: object
                      gitRepo:
                        description: 'gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod''s container.'
                        properties:
                          directory:
                            description: directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
                            type: string
                          repository:
                            description: repository is the URL
                            type: string
                          revision:
                            description: revision is the commit hash for the specified revision.
                            type: string
                        required:
                          - repository
                        type: object
                      glusterfs:
                        description: 'glusterfs represents a Glusterfs mount on the host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md'
                        properties:
                          endpoints:
                            description: 'endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                            type: string
                          path:
                            description: 'path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                            type: string
                          readOnly:
                            description: 'readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                            type: boolean
                        required:
                          - endpoints
                          - path
                        type: object
                      hostPath:
                        description: 'hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.'
                        properties:
                          path:
                            description: 'path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                            type: string
                          type:
                            description: 'type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                            type: string
                        required:
                          - path
                        type: object
                      iscsi:
                        description: 'iscsi represents an ISCSI Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md'
                        properties:
                          chapAuthDiscovery:
                            description: chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
                            type: boolean
                          chapAuthSession:
                            description: chapAuthSession defines whether support iSCSI Session CHAP authentication
                            type: boolean
                          fsType:
                            description: 'fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine'
                            type: string
                          initiatorName:
                            description: initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
                            type: string
                          iqn:
                            description: iqn is the target iSCSI Qualified Name.
                            type: string
                          iscsiInterface:
                            description: iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
                            type: string
                          lun:
                            description: lun represents iSCSI Target Lun number.
                            format: int32
                            type: integer
                          portals:
                            description: portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
                            items:
                              type: string
                            type: array
                          readOnly:
                            description: readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
                            type: boolean
                          secretRef:
                            description: secretRef is the CHAP Secret for iSCSI target and initiator authentication
                            properties:
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          targetPortal:
                            description: targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
                            type: string
                        required:
                          - iqn
                          - lun
                          - targetPortal
                        type: object
                      name:
                        description: 'name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      nfs:
                        description: 'nfs represents an NFS mount on the host that shares a pod''s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                        properties:
                          path:
                            description: 'path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                            type: string
                          readOnly:
                            description: 'readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                            type: boolean
                          server:
                            description: 'server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                            type: string
                        required:
                          - path
                          - server
                        type: object
                      persistentVolumeClaim:
                        description: 'persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                        properties:
                          claimName:
                            description: 'claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                            type: string
                          readOnly:
                            description: readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
                            type: boolean
                        required:
                          - claimName
                        type: object
                      photonPersistentDisk:
                        description: photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
                        properties:
                          fsType:
                            description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                            type: string
                          pdID:
                            description: pdID is the ID that identifies Photon Controller persistent disk
                            type: string
                        required:
                          - pdID
                        type: object
                      portworxVolume:
                        description: portworxVolume represents a portworx volume attached and mounted on kubelets host machine
                        properties:
                          fsType:
                            description: fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
                            type: string
                          readOnly:
                            description: readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                            type: boolean
                          volumeID:
                            description: volumeID uniquely identifies a Portworx volume
                            type: string
                        required:
                          - volumeID
                        type: object
                      projected:
                        description: projected items for all in one resources secrets, configmaps, and downward API
                        properties:
                          defaultMode:
                            description: defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                            format: int32
                            type: integer
                          sources:
                            description: sources is the list of volume projections
                            items:
                              description: Projection that may be projected along with other supported volume types
                              properties:
                                configMap:
                                  description: configMap information about the configMap data to project
                                  properties:
                                    items:
                                      description: items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                                      items:
                                        description: Maps a string key to a path within a volume.
                                        properties:
                                          key:
                                            description: key is the key to project.
                                            type: string
                                          mode:
                                            description: 'mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                            format: int32
                                            type: integer
                                          path:
                                            description: path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                                            type: string
                                        required:
                                          - key
                                          - path
                                        type: object
                                      type: array
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                      type: string
                                    optional:
                                      description: optional specify whether the ConfigMap or its keys must be defined
                                      type: boolean
                                  type: object
                                  x-kubernetes-map-type: atomic
                                downwardAPI:
                                  description: downwardAPI information about the downwardAPI data to project
                                  properties:
                                    items:
                                      description: Items is a list of DownwardAPIVolume file
                                      items:
                                        description: DownwardAPIVolumeFile represents information to create the file containing the pod field
                                        properties:
                                          fieldRef:
                                            description: 'Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.'
                                            properties:
                                              apiVersion:
                                                description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                                type: string
                                              fieldPath:
                                                description: Path of the field to select in the specified API version.
                                                type: string
                                            required:
                                              - fieldPath
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          mode:
                                            description: 'Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                            format: int32
                                            type: integer
                                          path:
                                            description: 'Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the ''..'' path. Must be utf-8 encoded. The first item of the relative path must not start with ''..'''
                                            type: string
                                          resourceFieldRef:
                                            description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.'
                                            properties:
                                              containerName:
                                                description: 'Container name: required for volumes, optional for env vars'
                                                type: string
                                              divisor:
                                                anyOf:
                                                  - type: integer
                                                  - type: string
                                                description: Specifies the output format of the exposed resources, defaults to "1"
                                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                x-kubernetes-int-or-string: true
                                              resource:
                                                description: 'Required: resource to select'
                                                type: string
                                            required:
                                              - resource
                                            type: object
                                            x-kubernetes-map-type: atomic
                                        required:
                                          - path
                                        type: object
                                      type: array
                                  type: object
                                secret:
                                  description: secret information about the secret data to project
                                  properties:
                                    items:
                                      description: items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                                      items:
                                        description: Maps a string key to a path within a volume.
                                        properties:
                                          key:
                                            description: key is the key to project.
                                            type: string
                                          mode:
                                            description: 'mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                            format: int32
                                            type: integer
                                          path:
                                            description: path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                                            type: string
                                        required:
                                          - key
                                          - path
                                        type: object
                                      type: array
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                      type: string
                                    optional:
                                      description: optional field specify whether the Secret or its key must be defined
                                      type: boolean
                                  type: object
                                  x-kubernetes-map-type: atomic
                                serviceAccountToken:
                                  description: serviceAccountToken is information about the serviceAccountToken data to project
                                  properties:
                                    audience:
                                      description: audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
                                      type: string
                                    expirationSeconds:
                                      description: expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
                                      format: int64
                                      type: integer
                                    path:
                                      description: path is the path relative to the mount point of the file to project the token into.
                                      type: string
                                  required:
                                    - path
                                  type: object
                              type: object
                            type: array
                        type: object
                      quobyte:
                        description: quobyte represents a Quobyte mount on the host that shares a pod's lifetime
                        properties:
                          group:
                            description: group to map volume access to Default is no group
                            type: string
                          readOnly:
                            description: readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
                            type: boolean
                          registry:
                            description: registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
                            type: string
                          tenant:
                            description: tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
                            type: string
                          user:
                            description: user to map volume access to Defaults to serivceaccount user
                            type: string
                          volume:
                            description: volume is a string that references an already created Quobyte volume by name.
                            type: string
                        required:
                          - registry
                          - volume
                        type: object
                      rbd:
                        description: 'rbd represents a Rados Block Device mount on the host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md'
                        properties:
                          fsType:
                            description: 'fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine'
                            type: string
                          image:
                            description: 'image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                            type: string
                          keyring:
                            description: 'keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                            type: string
                          monitors:
                            description: 'monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                            items:
                              type: string
                            type: array
                          pool:
                            description: 'pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                            type: string
                          readOnly:
                            description: 'readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                            type: boolean
                          secretRef:
                            description: 'secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                            properties:
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          user:
                            description: 'user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                            type: string
                        required:
                          - image
                          - monitors
                        type: object
                      scaleIO:
                        description: scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
                        properties:
                          fsType:
                            description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
                            type: string
                          gateway:
                            description: gateway is the host address of the ScaleIO API Gateway.
                            type: string
                          protectionDomain:
                            description: protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
                            type: string
                          readOnly:
                            description: readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                            type: boolean
                          secretRef:
                            description: secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
                            properties:
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          sslEnabled:
                            description: sslEnabled Flag enable/disable SSL communication with Gateway, default false
                            type: boolean
                          storageMode:
                            description: storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
                            type: string
                          storagePool:
                            description: storagePool is the ScaleIO Storage Pool associated with the protection domain.
                            type: string
                          system:
                            description: system is the name of the storage system as configured in ScaleIO.
                            type: string
                          volumeName:
                            description: volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
                            type: string
                        required:
                          - gateway
                          - secretRef
                          - system
                        type: object
                      secret:
                        description: 'secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                        properties:
                          defaultMode:
                            description: 'defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                            format: int32
                            type: integer
                          items:
                            description: items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                            items:
                              description: Maps a string key to a path within a volume.
                              properties:
                                key:
                                  description: key is the key to project.
                                  type: string
                                mode:
                                  description: 'mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                  format: int32
                                  type: integer
                                path:
                                  description: path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                                  type: string
                              required:
                                - key
                                - path
                              type: object
                            type: array
                          optional:
                            description: optional field specify whether the Secret or its keys must be defined
                            type: boolean
                          secretName:
                            description: 'secretName is the name of the secret in the pod''s namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                            type: string
                        type: object
                      storageos:
                        description: storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
                        properties:
                          fsType:
                            description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                            type: string
                          readOnly:
                            description: readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                            type: boolean
                          secretRef:
                            description: secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
                            properties:
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          volumeName:
                            description: volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
                            type: string
                          volumeNamespace:
                            description: volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
                            type: string
                        type: object
                      vsphereVolume:
                        description: vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
                        properties:
                          fsType:
                            description: fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                            type: string
                          storagePolicyID:
                            description: storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
                            type: string
                          storagePolicyName:
                            description: storagePolicyName is the storage Policy Based Management (SPBM) profile name.
                            type: string
                          volumePath:
                            description: volumePath is the path that identifies vSphere volume vmdk
                            type: string
                        required:
                          - volumePath
                        type: object
                    required:
                      - name
                    type: object
                  type: array
                ingress:
                  description: CodeEditor will create an Ingress resource if `true`.
                  type: boolean
                port:
                  default: 9000
                  description: Port that code editor will use inside the container.
                  format: int32
                  type: integer
                remote:
                  description: If `true`, code editor will be consumed remotely.
                  type: boolean
                serviceType:
                  default: ClusterIP
                  description: Service type of CodeEditor. `ClusterIP` and `NodePort` is supported.
                  enum:
                    - ClusterIP
                    - NodePort
                  type: string
                tlsSecretName:
                  description: Name of the TLS secret for ingress resource.
                  type: string
                version:
                  default: 4.22.0
                  description: App version of the code editor.
                  type: string
                volumeClaimTemplates:
                  description: Volume templates for ROS 2 workload. For each volume template, operator will create a PersistentVolumeClaim that can be mounted to the ROS 2 workload.
                  items:
                    description: PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
                    properties:
                      metadata:
                        description: May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
                        type: object
                      spec:
                        description: The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
                        properties:
                          accessModes:
                            description: 'accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          dataSource:
                            description: 'dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                            required:
                              - kind
                              - name
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSourceRef:
                            description: 'dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn''t specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn''t set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                              namespace:
                                description: Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                type: string
                            required:
                              - kind
                              - name
                            type: object
                          resources:
                            description: 'resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                            properties:
                              claims:
                                description: "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable."
                                items:
                                  description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                                  properties:
                                    name:
                                      description: Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
                                      type: string
                                  required:
                                    - name
                                  type: object
                                type: array
                                x-kubernetes-list-map-keys:
                                  - name
                                x-kubernetes-list-type: map
                              limits:
                                additionalProperties:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                              requests:
                                additionalProperties:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                            type: object
                          selector:
                            description: selector is a label query over volumes to consider for binding.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                    - key
                                    - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          storageClassName:
                            description: 'storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                            type: string
                          volumeMode:
                            description: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
                            type: string
                          volumeName:
                            description: volumeName is the binding reference to the PersistentVolume backing this claim.
                            type: string
                        type: object
                    required:
                      - spec
                    type: object
                  type: array
              required:
                - port
                - version
              type: object
            status:
              description: Most recently observed status of the CodeEditor.
              properties:
                deploymentStatus:
                  description: Status of code editor deployment.
                  properties:
                    containerStatuses:
                      description: Container statuses.
                      items:
                        description: ContainerStatus contains details for the current status of this container.
                        properties:
                          containerID:
                            description: Container's ID in the format '<type>://<container_id>'.
                            type: string
                          image:
                            description: 'The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.'
                            type: string
                          imageID:
                            description: ImageID of the container's image.
                            type: string
                          lastState:
                            description: Details about the container's last termination condition.
                            properties:
                              running:
                                description: Details about a running container
                                properties:
                                  startedAt:
                                    description: Time at which the container was last (re-)started
                                    format: date-time
                                    type: string
                                type: object
                              terminated:
                                description: Details about a terminated container
                                properties:
                                  containerID:
                                    description: Container's ID in the format '<type>://<container_id>'
                                    type: string
                                  exitCode:
                                    description: Exit status from the last termination of the container
                                    format: int32
                                    type: integer
                                  finishedAt:
                                    description: Time at which the container last terminated
                                    format: date-time
                                    type: string
                                  message:
                                    description: Message regarding the last termination of the container
                                    type: string
                                  reason:
                                    description: (brief) reason from the last termination of the container
                                    type: string
                                  signal:
                                    description: Signal from the last termination of the container
                                    format: int32
                                    type: integer
                                  startedAt:
                                    description: Time at which previous execution of the container started
                                    format: date-time
                                    type: string
                                required:
                                  - exitCode
                                type: object
                              waiting:
                                description: Details about a waiting container
                                properties:
                                  message:
                                    description: Message regarding why the container is not yet running.
                                    type: string
                                  reason:
                                    description: (brief) reason the container is not yet running.
                                    type: string
                                type: object
                            type: object
                          name:
                            description: This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
                            type: string
                          ready:
                            description: Specifies whether the container has passed its readiness probe.
                            type: boolean
                          restartCount:
                            description: The number of times the container has been restarted.
                            format: int32
                            type: integer
                          started:
                            description: Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
                            type: boolean
                          state:
                            description: Details about the container's current condition.
                            properties:
                              running:
                                description: Details about a running container
                                properties:
                                  startedAt:
                                    description: Time at which the container was last (re-)started
                                    format: date-time
                                    type: string
                                type: object
                              terminated:
                                description: Details about a terminated container
                                properties:
                                  containerID:
                                    description: Container's ID in the format '<type>://<container_id>'
                                    type: string
                                  exitCode:
                                    description: Exit status from the last termination of the container
                                    format: int32
                                    type: integer
                                  finishedAt:
                                    description: Time at which the container last terminated
                                    format: date-time
                                    type: string
                                  message:
                                    description: Message regarding the last termination of the container
                                    type: string
                                  reason:
                                    description: (brief) reason from the last termination of the container
                                    type: string
                                  signal:
                                    description: Signal from the last termination of the container
                                    format: int32
                                    type: integer
                                  startedAt:
                                    description: Time at which previous execution of the container started
                                    format: date-time
                                    type: string
                                required:
                                  - exitCode
                                type: object
                              waiting:
                                description: Details about a waiting container
                                properties:
                                  message:
                                    description: Message regarding why the container is not yet running.
                                    type: string
                                  reason:
                                    description: (brief) reason the container is not yet running.
                                    type: string
                                type: object
                            type: object
                        required:
                          - image
                          - imageID
                          - name
                          - ready
                          - restartCount
                        type: object
                      type: array
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    status:
                      description: Status of the Deployment.
                      properties:
                        availableReplicas:
                          description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
                          format: int32
                          type: integer
                        collisionCount:
                          description: Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
                          format: int32
                          type: integer
                        conditions:
                          description: Represents the latest available observations of a deployment's current state.
                          items:
                            description: DeploymentCondition describes the state of a deployment at a certain point.
                            properties:
                              lastTransitionTime:
                                description: Last time the condition transitioned from one status to another.
                                format: date-time
                                type: string
                              lastUpdateTime:
                                description: The last time this condition was updated.
                                format: date-time
                                type: string
                              message:
                                description: A human readable message indicating details about the transition.
                                type: string
                              reason:
                                description: The reason for the condition's last transition.
                                type: string
                              status:
                                description: Status of the condition, one of True, False, Unknown.
                                type: string
                              type:
                                description: Type of deployment condition.
                                type: string
                            required:
                              - status
                              - type
                            type: object
                          type: array
                        observedGeneration:
                          description: The generation observed by the deployment controller.
                          format: int64
                          type: integer
                        readyReplicas:
                          description: readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.
                          format: int32
                          type: integer
                        replicas:
                          description: Total number of non-terminated pods targeted by this deployment (their labels match the selector).
                          format: int32
                          type: integer
                        unavailableReplicas:
                          description: Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
                          format: int32
                          type: integer
                        updatedReplicas:
                          description: Total number of non-terminated pods targeted by this deployment that have the desired template spec.
                          format: int32
                          type: integer
                      type: object
                  type: object
                externalVolumeStatuses:
                  description: Statuses of external volumes.
                  items:
                    properties:
                      exists:
                        description: Indicates if the volume exists.
                        type: boolean
                      name:
                        description: Name of the external volume.
                        type: string
                    type: object
                  type: array
                ingressStatus:
                  description: Status of CodeEditor Ingress.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                phase:
                  description: Phase of CodeEditor. It sums the general status of code editor.
                  type: string
                pvcStatuses:
                  description: Statuses of owned PersistentVolumeClaims.
                  items:
                    properties:
                      resource:
                        description: Generic status for any owned resource.
                        properties:
                          created:
                            description: Shows if the owned resource is created.
                            type: boolean
                          phase:
                            description: Phase of the owned resource.
                            type: string
                          reference:
                            description: Reference to the owned resource.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                          - created
                        type: object
                      status:
                        description: Status of the ROS2Bridge instance.
                        properties:
                          accessModes:
                            description: 'accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          allocatedResources:
                            additionalProperties:
                              anyOf:
                                - type: integer
                                - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
                            type: object
                          capacity:
                            additionalProperties:
                              anyOf:
                                - type: integer
                                - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: capacity represents the actual resources of the underlying volume.
                            type: object
                          conditions:
                            description: conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
                            items:
                              description: PersistentVolumeClaimCondition contails details about state of pvc
                              properties:
                                lastProbeTime:
                                  description: lastProbeTime is the time we probed the condition.
                                  format: date-time
                                  type: string
                                lastTransitionTime:
                                  description: lastTransitionTime is the time the condition transitioned from one status to another.
                                  format: date-time
                                  type: string
                                message:
                                  description: message is the human-readable message indicating details about last transition.
                                  type: string
                                reason:
                                  description: reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
                                  type: string
                                status:
                                  type: string
                                type:
                                  description: PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
                                  type: string
                              required:
                                - status
                                - type
                              type: object
                            type: array
                          phase:
                            description: phase represents the current phase of PersistentVolumeClaim.
                            type: string
                          resizeStatus:
                            description: resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
                            type: string
                        type: object
                    type: object
                  type: array
                serviceStatus:
                  description: Status of code editor service.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    urls:
                      additionalProperties:
                        type: string
                      description: Connection URL.
                      type: object
                  type: object
                workloadUpdateNeeded:
                  description: Field to indicate if the workload should be restarted.
                  type: boolean
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: discoveryservers.robot.roboscale.io
spec:
  group: robot.roboscale.io
  names:
    kind: DiscoveryServer
    listKind: DiscoveryServerList
    plural: discoveryservers
    singular: discoveryserver
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.type
          name: Type
          type: string
        - jsonPath: .spec.domainID
          name: Domain ID
          type: string
        - jsonPath: .spec.hostname
          name: Hostname
          type: string
        - jsonPath: .spec.subdomain
          name: Subdomain
          type: string
        - jsonPath: .status.connectionInfo.ip
          name: IP
          type: string
        - jsonPath: .status.connectionInfo.uri
          name: URI
          type: string
        - jsonPath: .status.phase
          name: Phase
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: DiscoveryServer is a custom resource that connects Robots and Fleets both locally and geoghraphically in DDS (UDP multicast) level.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired behavior of the DiscoveryServer.
              properties:
                cluster:
                  description: Cloud instance name that holds DiscoveryServer instance with `Server` type. Should be empty if the type is `Server` since it takes cloud instance's name automatically. Should be set if the type is `Client`.
                  type: string
                domainID:
                  description: ROS domain ID for robot. See https://docs.ros.org/en/foxy/Concepts/About-Domain-ID.html.
                  maximum: 101
                  minimum: 0
                  type: integer
                hostname:
                  description: If instance type is `Server`, it can be an arbitrary value. If instance type is `Client`, it should be the same with Server's hostname. Used for getting Server's IP over DNS.
                  type: string
                protocol:
                  enum:
                    - TCP
                    - UDP
                  type: string
                reference:
                  description: Reference to the `Server` instance. It is used if `.spec.type` is `Client`. Referenced object can be previously provisioned in another cluster. In that case, cluster's name can be specified in `.spec.cluster` field.
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                subdomain:
                  description: If instance type is `Server`, it can be an arbitrary value. If instance type is `Client`, it should be the same with Server's subdomain. Used for getting Server's IP over DNS.
                  type: string
                type:
                  description: Instance type can be either `Server` or `Client`. If `Server`, instance creates discovery server resources and workloads. Other `Client` instances can connect to the `Server` instance. If `Client`, instance tries to connect a `Server` instance and hold `Server` configuration in a ConfigMap.
                  type: string
              required:
                - domainID
              type: object
            status:
              description: Most recently observed status of the DiscoveryServer.
              properties:
                configMapStatus:
                  description: Status of the DiscoveryServer config map.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                connectionInfo:
                  description: Connection information.
                  properties:
                    configMapName:
                      description: Name of the config map that holds discovery server configuration.
                      type: string
                    ip:
                      description: IP of the discovery server. IP is being obtained from the DNS name, which is being built according to the discovery server configuration.
                      type: string
                    uri:
                      description: URI of the discovery server. Discovery server instance tries to ping this address to see if it's reachable.
                      type: string
                  type: object
                phase:
                  description: Phase of the DiscoveryServer.
                  type: string
                podStatus:
                  description: Status of the DiscoveryServer pod.
                  properties:
                    ip:
                      description: IP of the pod.
                      type: string
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                  type: object
                serviceExportStatus:
                  description: Status of the DiscoveryServer ServiceExport.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                serviceStatus:
                  description: Status of the DiscoveryServer service.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: edgeproxies.robot.roboscale.io
spec:
  group: robot.roboscale.io
  names:
    kind: EdgeProxy
    listKind: EdgeProxyList
    plural: edgeproxies
    singular: edgeproxy
  scope: Namespaced
  versions:
    - name: v1alpha2
      schema:
        openAPIV3Schema:
          description: EdgeProxy is the Schema for the edgeproxies API.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: EdgeProxySpec defines the desired state of EdgeProxy.
              type: object
            status:
              description: EdgeProxyStatus defines the observed state of EdgeProxy.
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: robot-system/robot-serving-cert
    controller-gen.kubebuilder.io/version: v0.9.2
  name: launchmanagers.robot.roboscale.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: robot-webhook-service
          namespace: robot-system
          path: /convert
      conversionReviewVersions:
        - v1
  group: robot.roboscale.io
  names:
    kind: LaunchManager
    listKind: LaunchManagerList
    plural: launchmanagers
    singular: launchmanager
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.launches[].name
          name: Launches
          type: string
        - jsonPath: .status.phase
          name: Phase
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: LaunchManager is the Schema for the launchmanagers API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired behavior of the LaunchManager.
              properties:
                launches:
                  additionalProperties:
                    description: Launch description of a repository.
                    properties:
                      container:
                        description: General container configuration parameters.
                        properties:
                          display:
                            description: Launch processes connects an X11 socket if it's set to `true` and a target RobotVDI resource is set in labels with key `robolaunch.io/target-vdi`. Applications that requires GUI can be executed such as rViz.
                            type: boolean
                          env:
                            description: Additional environment variables to set when launching ROS nodes.
                            items:
                              description: EnvVar represents an environment variable present in a Container.
                              properties:
                                name:
                                  description: Name of the environment variable. Must be a C_IDENTIFIER.
                                  type: string
                                value:
                                  description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                                  type: string
                                valueFrom:
                                  description: Source for the environment variable's value. Cannot be used if value is not empty.
                                  properties:
                                    configMapKeyRef:
                                      description: Selects a key of a ConfigMap.
                                      properties:
                                        key:
                                          description: The key to select.
                                          type: string
                                        name:
                                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                          type: string
                                        optional:
                                          description: Specify whether the ConfigMap or its key must be defined
                                          type: boolean
                                      required:
                                        - key
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    fieldRef:
                                      description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                                      properties:
                                        apiVersion:
                                          description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                          type: string
                                        fieldPath:
                                          description: Path of the field to select in the specified API version.
                                          type: string
                                      required:
                                        - fieldPath
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    resourceFieldRef:
                                      description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                                      properties:
                                        containerName:
                                          description: 'Container name: required for volumes, optional for env vars'
                                          type: string
                                        divisor:
                                          anyOf:
                                            - type: integer
                                            - type: string
                                          description: Specifies the output format of the exposed resources, defaults to "1"
                                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                          x-kubernetes-int-or-string: true
                                        resource:
                                          description: 'Required: resource to select'
                                          type: string
                                      required:
                                        - resource
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    secretKeyRef:
                                      description: Selects a key of a secret in the pod's namespace
                                      properties:
                                        key:
                                          description: The key of the secret to select from.  Must be a valid secret key.
                                          type: string
                                        name:
                                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                          type: string
                                        optional:
                                          description: Specify whether the Secret or its key must be defined
                                          type: boolean
                                      required:
                                        - key
                                      type: object
                                      x-kubernetes-map-type: atomic
                                  type: object
                              required:
                                - name
                              type: object
                            type: array
                          privileged:
                            description: Launch container privilege.
                            type: boolean
                          resources:
                            description: Launch container resource limits.
                            properties:
                              cpu:
                                description: CPU resource limit.
                                pattern: ^([0-9])+(m)$
                                type: string
                              gpuCore:
                                description: GPU core number that will be allocated.
                                type: integer
                              gpuInstance:
                                default: nvidia.com/gpu
                                description: GPU instance that will be allocated. eg. nvidia.com/mig-1g.5gb. Defaults to "nvidia.com/gpu".
                                type: string
                              memory:
                                description: Memory resource limit.
                                pattern: ^([0-9])+(Mi|Gi)$
                                type: string
                            type: object
                        type: object
                      entrypoint:
                        description: Entrypoint configuration of launch.
                        properties:
                          cmd:
                            description: Custom command to launch packages or start nodes. Required if the launch type is `Custom`.
                            type: string
                          disableSourcingWs:
                            description: If `true`, workspaces are not sourced by default. Used if the launch type is `Custom`.
                            type: boolean
                          executable:
                            description: Executable file name. (eg. `webcam_pub.py`) Required and used if the launch type is `Run`.
                            type: string
                          launchfile:
                            description: Launchfile. (eg. `nav_launch.py`) Required and used if the launch type is `Launch`.
                            type: string
                          package:
                            description: Package name. (eg. `robolaunch_cloudy_navigation`)
                            type: string
                          parameters:
                            additionalProperties:
                              type: string
                            description: Launch parameters.
                            type: object
                          type:
                            description: Launching type. Can be `Launch`, `Run` or `Custom`.
                            enum:
                              - Launch
                              - Run
                              - Custom
                            type: string
                        type: object
                      instances:
                        description: Cluster selector. If the current instance name is on the list, LaunchManager creates launch pods.
                        items:
                          type: string
                        type: array
                      namespacing:
                        description: ROS 2 namespacing. May not be suitable for all launchfiles. If used, all the node names and topic names should be defined relative, not absolute. (eg. `cmd_vel` instead of /cmd_vel``)
                        type: boolean
                      scope:
                        description: Selects the scope for launch.
                        properties:
                          path:
                            description: Absolute path of the directory. It's being applied if the scope type is `Path`.
                            type: string
                          scopeType:
                            description: Type of the scope. Allowed scopes are `Workspace` and `Path`.
                            enum:
                              - Workspace
                              - Path
                            type: string
                          workspace:
                            description: Name of the workspace. Should be selected among the existing workspaces in WorkspaceManager's manifests. It's being applied if the scope type is `Workspace`.
                            type: string
                        required:
                          - scopeType
                        type: object
                    required:
                      - scope
                    type: object
                  description: Launch descriptions. Every object defined here generates a launching command in the specified workspace.
                  type: object
              type: object
            status:
              description: Most recently observed status of the LaunchManager.
              properties:
                active:
                  description: Indicates if the LaunchManager is attached to a Robot and actively running.
                  type: boolean
                launchPodStatus:
                  description: Collective statuses of launch pod and launch objects.
                  properties:
                    launchStatus:
                      additionalProperties:
                        properties:
                          active:
                            description: Inditaces if the launch process are actively running on cluster. It may not be selected by launch cluster selectors.
                            type: boolean
                          containerStatus:
                            description: Statuses of the containers of pods owned by LaunchManager.
                            properties:
                              containerID:
                                description: Container's ID in the format '<type>://<container_id>'.
                                type: string
                              image:
                                description: 'The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.'
                                type: string
                              imageID:
                                description: ImageID of the container's image.
                                type: string
                              lastState:
                                description: Details about the container's last termination condition.
                                properties:
                                  running:
                                    description: Details about a running container
                                    properties:
                                      startedAt:
                                        description: Time at which the container was last (re-)started
                                        format: date-time
                                        type: string
                                    type: object
                                  terminated:
                                    description: Details about a terminated container
                                    properties:
                                      containerID:
                                        description: Container's ID in the format '<type>://<container_id>'
                                        type: string
                                      exitCode:
                                        description: Exit status from the last termination of the container
                                        format: int32
                                        type: integer
                                      finishedAt:
                                        description: Time at which the container last terminated
                                        format: date-time
                                        type: string
                                      message:
                                        description: Message regarding the last termination of the container
                                        type: string
                                      reason:
                                        description: (brief) reason from the last termination of the container
                                        type: string
                                      signal:
                                        description: Signal from the last termination of the container
                                        format: int32
                                        type: integer
                                      startedAt:
                                        description: Time at which previous execution of the container started
                                        format: date-time
                                        type: string
                                    required:
                                      - exitCode
                                    type: object
                                  waiting:
                                    description: Details about a waiting container
                                    properties:
                                      message:
                                        description: Message regarding why the container is not yet running.
                                        type: string
                                      reason:
                                        description: (brief) reason the container is not yet running.
                                        type: string
                                    type: object
                                type: object
                              name:
                                description: This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
                                type: string
                              ready:
                                description: Specifies whether the container has passed its readiness probe.
                                type: boolean
                              restartCount:
                                description: The number of times the container has been restarted.
                                format: int32
                                type: integer
                              started:
                                description: Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
                                type: boolean
                              state:
                                description: Details about the container's current condition.
                                properties:
                                  running:
                                    description: Details about a running container
                                    properties:
                                      startedAt:
                                        description: Time at which the container was last (re-)started
                                        format: date-time
                                        type: string
                                    type: object
                                  terminated:
                                    description: Details about a terminated container
                                    properties:
                                      containerID:
                                        description: Container's ID in the format '<type>://<container_id>'
                                        type: string
                                      exitCode:
                                        description: Exit status from the last termination of the container
                                        format: int32
                                        type: integer
                                      finishedAt:
                                        description: Time at which the container last terminated
                                        format: date-time
                                        type: string
                                      message:
                                        description: Message regarding the last termination of the container
                                        type: string
                                      reason:
                                        description: (brief) reason from the last termination of the container
                                        type: string
                                      signal:
                                        description: Signal from the last termination of the container
                                        format: int32
                                        type: integer
                                      startedAt:
                                        description: Time at which previous execution of the container started
                                        format: date-time
                                        type: string
                                    required:
                                      - exitCode
                                    type: object
                                  waiting:
                                    description: Details about a waiting container
                                    properties:
                                      message:
                                        description: Message regarding why the container is not yet running.
                                        type: string
                                      reason:
                                        description: (brief) reason the container is not yet running.
                                        type: string
                                    type: object
                                type: object
                            required:
                              - image
                              - imageID
                              - name
                              - ready
                              - restartCount
                            type: object
                        type: object
                      description: Status of launch objects. Every launch object generates a `ros2 launch` command that will run as an entrypoint in a container.
                      type: object
                    status:
                      description: Launch pod status. Every LaunchManager creates one pod if active.
                      properties:
                        ip:
                          description: IP of the pod.
                          type: string
                        resource:
                          description: Generic status for any owned resource.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                      type: object
                  type: object
                phase:
                  description: Phase of LaunchManager.
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: robot-system/robot-serving-cert
    controller-gen.kubebuilder.io/version: v0.9.2
  name: metricscollectors.robot.roboscale.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: robot-webhook-service
          namespace: robot-system
          path: /convert
      conversionReviewVersions:
        - v1
  group: robot.roboscale.io
  names:
    kind: MetricsCollector
    listKind: MetricsCollectorList
    plural: metricscollectors
    singular: metricscollector
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: MetricsCollector is the Schema for the metricscollectors API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: MetricsCollectorSpec defines the desired state of MetricsCollector
              properties:
                cpu:
                  type: boolean
                gpu:
                  type: boolean
                memory:
                  type: boolean
                networkLoad:
                  type: boolean
                waitSeconds:
                  default: 10
                  description: 'TODO: Add default value'
                  format: int64
                  type: integer
              required:
                - cpu
                - gpu
                - memory
                - networkLoad
                - waitSeconds
              type: object
            status:
              description: MetricsCollectorStatus defines the observed state of MetricsCollector
              properties:
                allocatable:
                  additionalProperties:
                    anyOf:
                      - type: integer
                      - type: string
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  description: ResourceList is a set of (resource name, quantity) pairs.
                  type: object
                componentMetrics:
                  items:
                    properties:
                      containerName:
                        type: string
                      cpuUtilization:
                        properties:
                          corePercentage:
                            type: string
                          hostPercentage:
                            type: string
                          message:
                            type: string
                          value:
                            type: string
                        type: object
                      memoryUtilization:
                        properties:
                          hostPercentage:
                            type: string
                          message:
                            type: string
                          value:
                            type: string
                        type: object
                      message:
                        type: string
                      networkLoadUtilization:
                        properties:
                          interfaces:
                            items:
                              properties:
                                name:
                                  type: string
                                receive:
                                  properties:
                                    load:
                                      type: string
                                    loadKBit:
                                      type: string
                                    value:
                                      type: string
                                  type: object
                                transmit:
                                  properties:
                                    load:
                                      type: string
                                    loadKBit:
                                      type: string
                                    value:
                                      type: string
                                  type: object
                              type: object
                            type: array
                          message:
                            type: string
                        type: object
                      ownerReference:
                        description: OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          blockOwnerDeletion:
                            description: If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
                            type: boolean
                          controller:
                            description: If true, this reference points to the managing controller.
                            type: boolean
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                            type: string
                        required:
                          - apiVersion
                          - kind
                          - name
                          - uid
                        type: object
                        x-kubernetes-map-type: atomic
                      podReference:
                        description: "ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. \n Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 ."
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                    type: object
                  type: array
                lastUpdateTimestamp:
                  format: date-time
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: metricsexporters.robot.roboscale.io
spec:
  group: robot.roboscale.io
  names:
    kind: MetricsExporter
    listKind: MetricsExporterList
    plural: metricsexporters
    singular: metricsexporter
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: MetricsExporter collects metrics from host machine and expose them from the Kubernetes API.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired behavior of the MetricsExporter.
              properties:
                gpu:
                  description: Configurational parameters about GPU metrics collection.
                  properties:
                    interval:
                      description: Watching latency.
                      type: integer
                    track:
                      description: MetricsExporter watches volatile GPU usage in the host machine if it's set to `true`.
                      type: boolean
                  type: object
                network:
                  description: Configurational parameters about network metrics collection.
                  properties:
                    interfaces:
                      description: Network interfaces which are desired to being watched.
                      items:
                        type: string
                      type: array
                    interval:
                      description: Watching latency.
                      type: integer
                    track:
                      description: MetricsExporter watches network loads in the host machine if it's set to `true`.
                      type: boolean
                  type: object
                storage:
                  description: Configurational parameters about storage metrics collection.
                  properties:
                    interval:
                      description: Watching latency.
                      type: integer
                    track:
                      description: MetricsExporter watches storage usage in the host machine if it's set to `true`.
                      type: boolean
                  type: object
              type: object
            status:
              description: Most recently observed status of the MetricsExporter.
              properties:
                phase:
                  description: Phase of MetricsExporter.
                  type: string
                podStatus:
                  description: Status of MetricsExporter pod.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                roleBindingStatus:
                  description: Status of role binding created for main and sidecar applications.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                roleStatus:
                  description: Status of role created for main and sidecar applications.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                saStatus:
                  description: Status of service account created for main and sidecar applications.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                usage:
                  description: Usage metrics.
                  properties:
                    gpuDeviceStatuses:
                      description: GPU device information.
                      properties:
                        dcgmEndpoint:
                          description: DCGM endpoint.
                          type: string
                        devices:
                          additionalProperties:
                            properties:
                              device:
                                description: GPU device name.
                                type: string
                              model:
                                description: GPU device model.
                                type: string
                              uuid:
                                description: GPU device UUID.
                                type: string
                            type: object
                          description: Available GPU devices.
                          type: object
                        metrics:
                          description: GPU device metrics from DCGM exporter.
                          properties:
                            fbMemoryFree:
                              additionalProperties:
                                type: string
                              description: Framebuffer memory free (in MiB).
                              type: object
                            fbMemoryUsed:
                              additionalProperties:
                                type: string
                              description: Framebuffer memory used (in MiB).
                              type: object
                            gpuUtil:
                              additionalProperties:
                                type: string
                              description: GPU utilization (in %).
                              type: object
                            memoryUtil:
                              additionalProperties:
                                type: string
                              description: Memory utilization (in %).
                              type: object
                            powerUsage:
                              additionalProperties:
                                type: string
                              description: Power draw (in W).
                              type: object
                            temp:
                              additionalProperties:
                                type: string
                              description: GPU temperature (in C).
                              type: object
                          type: object
                      type: object
                    gpuInstanceUsage:
                      additionalProperties:
                        description: Current usage of GPU cores belongs to a GPU instance (eg. mig-1g.10gb).
                        properties:
                          allocated:
                            default: "0"
                            description: Number of allocated virtual cores.
                            type: string
                          capacity:
                            description: Number of total virtual cores.
                            type: string
                        type: object
                      description: GPU virtual cores.
                      type: object
                    network:
                      description: Network usage information.
                      properties:
                        lastUpdateTimestamp:
                          description: Last update time.
                          type: string
                        load:
                          additionalProperties:
                            properties:
                              in:
                                description: Average load of incoming packets.
                                type: string
                              out:
                                description: Average load of outgoing packets.
                                type: string
                            type: object
                          description: Loads values of network interfaces.
                          type: object
                      type: object
                    storage:
                      description: Storage usage information
                      properties:
                        lastUpdateTimestamp:
                          description: Last update time.
                          type: string
                        usage:
                          additionalProperties:
                            properties:
                              mountedOn:
                                description: Directory that the filesystem mounted on.
                                type: string
                              percentage:
                                description: Usage percentage of a filesystem.
                                type: string
                              size:
                                description: Size of the filesystem.
                                type: string
                              used:
                                description: Size of the used parts of a filesystem.
                                type: string
                            type: object
                          description: Usage values of filesystems.
                          type: object
                      type: object
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: notebooks.robot.roboscale.io
spec:
  group: robot.roboscale.io
  names:
    kind: Notebook
    listKind: NotebookList
    plural: notebooks
    singular: notebook
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: Notebook is the Schema for the notebooks API.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: NotebookSpec defines the desired state of Notebook.
              properties:
                display:
                  description: Notebook connects an X11 socket if it's set to `true` and a target Notebook resource is set in labels with key `robolaunch.io/target-vdi`. Applications that requires GUI can be executed such as VLC.
                  type: boolean
                ingress:
                  description: '[*alpha*] Notebook will create an Ingress resource if `true`.'
                  type: boolean
                privileged:
                  description: If `true`, containers of Notebook will be privileged containers. It can be used in physical instances where it's necessary to access I/O devices on the host machine. Not recommended to activate this field on cloud instances.
                  type: boolean
                resources:
                  description: Resource limitations of Notebook.
                  properties:
                    cpu:
                      description: CPU resource limit.
                      pattern: ^([0-9])+(m)$
                      type: string
                    gpuCore:
                      description: GPU core number that will be allocated.
                      type: integer
                    gpuInstance:
                      default: nvidia.com/gpu
                      description: GPU instance that will be allocated. eg. nvidia.com/mig-1g.5gb. Defaults to "nvidia.com/gpu".
                      type: string
                    memory:
                      description: Memory resource limit.
                      pattern: ^([0-9])+(Mi|Gi)$
                      type: string
                  type: object
                serviceType:
                  default: NodePort
                  description: Service type of Notebook. `ClusterIP` and `NodePort` is supported.
                  enum:
                    - ClusterIP
                    - NodePort
                  type: string
              type: object
            status:
              description: NotebookStatus defines the observed state of Notebook.
              properties:
                configMapStatus:
                  description: Config map status. It's used to add background apps.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                customPortIngressStatus:
                  description: Status of Notebook ingress for custom ports service. Created only if the robot has an additional config with key `IDE_CUSTOM_PORT_RANGE` and `.spec.ingress` is `true`.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                customPortServiceStatus:
                  description: Status of Notebook service for custom ports. Created only if the robot has an additional config with key `IDE_CUSTOM_PORT_RANGE`.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    urls:
                      additionalProperties:
                        type: string
                      description: Connection URL.
                      type: object
                  type: object
                ingressStatus:
                  description: Status of Notebook Ingress.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                phase:
                  description: Phase of Notebook.
                  type: string
                podStatus:
                  description: Status of Notebook pod.
                  properties:
                    ip:
                      description: IP of the pod.
                      type: string
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                  type: object
                serviceExportStatus:
                  description: Status of Notebook ServiceExport. Created only if the instance type is Physical Instance.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                serviceStatus:
                  description: Status of Notebook service.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    urls:
                      additionalProperties:
                        type: string
                      description: Connection URL.
                      type: object
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  name: relayservers.robot.roboscale.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: robot-webhook-service
          namespace: robot-system
          path: /convert
      conversionReviewVersions:
        - v1
  group: robot.roboscale.io
  names:
    kind: RelayServer
    listKind: RelayServerList
    plural: relayservers
    singular: relayserver
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.instanceName
          name: Instance
          type: string
        - jsonPath: .spec.remoteNamespace
          name: Remote Namespace
          type: string
        - jsonPath: .status.phase
          name: Phase
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: RelayServer is the Schema for the relayservers API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: RelayServerSpec defines the desired state of RelayServer.
              properties:
                hostname:
                  description: Hostname of the remote pod.
                  type: string
                instanceName:
                  description: Remote instance name.
                  type: string
                remoteNamespace:
                  description: Remote namespace.
                  type: string
                remotePort:
                  description: Remote port.
                  type: integer
                rootDNSConfig:
                  description: '[*alpha*] Root DNS configuration.'
                  properties:
                    host:
                      description: '[*alpha*] Root DNS name..'
                      type: string
                  required:
                    - host
                  type: object
                subdomain:
                  description: Subdomain of the remote pod. It's also same with remote service's name.
                  type: string
                tlsSecretRef:
                  description: '[*alpha*] TLS secret reference.'
                  properties:
                    name:
                      description: '[*alpha*] TLS secret object name.'
                      type: string
                    namespace:
                      description: '[*alpha*] TLS secret object namespace.'
                      type: string
                  required:
                    - name
                    - namespace
                  type: object
              type: object
            status:
              description: RelayServerStatus defines the observed state of RelayServer.
              properties:
                ingressStatus:
                  description: Status of RelayServer Ingress.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                phase:
                  description: Phase of RelayServer.
                  type: string
                podStatus:
                  description: Status of RelayServer pod.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                serviceStatus:
                  description: Status of RelayServer service.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    urls:
                      additionalProperties:
                        type: string
                      description: Connection URL.
                      type: object
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: robotartifacts.robot.roboscale.io
spec:
  group: robot.roboscale.io
  names:
    kind: RobotArtifact
    listKind: RobotArtifactList
    plural: robotartifacts
    singular: robotartifact
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: RobotArtifact is a non-functional resource that holds Robot's specifications. It is used to define Robot templates.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            template:
              description: Holds Robot's `.spec`.
              properties:
                additionalConfigs:
                  additionalProperties:
                    properties:
                      configType:
                        default: Operator
                        description: Config type is by default `Operator`. Other options are `Env` and `File`.
                        type: string
                      value:
                        description: Value of the corresponding config key.
                        type: string
                    type: object
                  description: Key value pairs that operator uses to extend configuration.
                  type: object
                environment:
                  description: Holds environment's configuration. Applied if `.spec.type` is `Environment` and must be `nil` otherwise.
                  properties:
                    application:
                      description: Application properties.
                      properties:
                        name:
                          description: Application name.
                          type: string
                        version:
                          description: Version of the application.
                          type: string
                      required:
                        - name
                        - version
                      type: object
                    devspace:
                      description: DevSpace image properties.
                      properties:
                        desktop:
                          description: Ubuntu desktop.
                          type: string
                        ubuntuDistro:
                          description: Ubuntu distribution of the environment.
                          type: string
                        version:
                          description: DevSpace image version.
                          type: string
                      required:
                        - desktop
                        - ubuntuDistro
                        - version
                      type: object
                    domain:
                      description: Domain of the environment.
                      type: string
                  required:
                    - application
                    - devspace
                    - domain
                  type: object
                robot:
                  description: Holds robot's configuration. Applied if `.spec.type` is `Robot` and must be `nil` otherwise.
                  properties:
                    bridgeEnabled:
                      description: If enabled, ROSBridge object will be created.
                      type: boolean
                    discoveryServerTemplate:
                      description: Discovery server configurational parameters.
                      properties:
                        cluster:
                          description: Cloud instance name that holds DiscoveryServer instance with `Server` type. Should be empty if the type is `Server` since it takes cloud instance's name automatically. Should be set if the type is `Client`.
                          type: string
                        domainID:
                          description: ROS domain ID for robot. See https://docs.ros.org/en/foxy/Concepts/About-Domain-ID.html.
                          maximum: 101
                          minimum: 0
                          type: integer
                        hostname:
                          description: If instance type is `Server`, it can be an arbitrary value. If instance type is `Client`, it should be the same with Server's hostname. Used for getting Server's IP over DNS.
                          type: string
                        protocol:
                          enum:
                            - TCP
                            - UDP
                          type: string
                        reference:
                          description: Reference to the `Server` instance. It is used if `.spec.type` is `Client`. Referenced object can be previously provisioned in another cluster. In that case, cluster's name can be specified in `.spec.cluster` field.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        subdomain:
                          description: If instance type is `Server`, it can be an arbitrary value. If instance type is `Client`, it should be the same with Server's subdomain. Used for getting Server's IP over DNS.
                          type: string
                        type:
                          description: Instance type can be either `Server` or `Client`. If `Server`, instance creates discovery server resources and workloads. Other `Client` instances can connect to the `Server` instance. If `Client`, instance tries to connect a `Server` instance and hold `Server` configuration in a ConfigMap.
                          type: string
                      required:
                        - domainID
                      type: object
                    distributions:
                      description: ROS 2 distributions to be used. You can select multiple distributions if they are supported in the same underlying OS. (eg. `foxy` and `galactic` are supported in Ubuntu Focal, so they can be used together but both cannot be used with `humble`)
                      items:
                        description: ROS 2 distribution selection. Currently supported distributions are Humble, Foxy, Galactic.
                        enum:
                          - foxy
                          - galactic
                          - humble
                        type: string
                      maxItems: 2
                      minItems: 1
                      type: array
                    domainID:
                      description: ROS domain ID for robot. See https://docs.ros.org/en/foxy/Concepts/About-Domain-ID.html.
                      maximum: 101
                      minimum: 0
                      type: integer
                    rmwImplementation:
                      description: RMW implementation selection. Robot operator currently supports only FastRTPS. See https://docs.ros.org/en/foxy/How-To-Guides/Working-with-multiple-RMW-implementations.html.
                      enum:
                        - rmw_fastrtps_cpp
                      type: string
                    rosBridgeTemplate:
                      description: ROS bridge configurational parameters.
                      properties:
                        distro:
                          description: Configurational parameters for ROS 2 bridge.
                          enum:
                            - foxy
                            - galactic
                            - humble
                          type: string
                        ingress:
                          description: '[*alpha*] ROSBridge will create an Ingress resource if `true`.'
                          type: boolean
                        serviceType:
                          description: Service type of ROSBridge. `ClusterIP` and `NodePort` is supported.
                          enum:
                            - ClusterIP
                            - NodePort
                          type: string
                      type: object
                  required:
                    - domainID
                  type: object
                robotDevSuiteTemplate:
                  description: Robot development suite template
                  properties:
                    ideEnabled:
                      description: If `true`, a Cloud IDE will be provisioned inside development suite.
                      type: boolean
                    notebookEnabled:
                      description: If `true`, a Notebook will be provisioned inside development suite.
                      type: boolean
                    notebookTemplate:
                      description: Configurational parameters of Notebook. Applied if `.spec.notebookEnabled` is set to `true`.
                      properties:
                        display:
                          description: Notebook connects an X11 socket if it's set to `true` and a target Notebook resource is set in labels with key `robolaunch.io/target-vdi`. Applications that requires GUI can be executed such as VLC.
                          type: boolean
                        ingress:
                          description: '[*alpha*] Notebook will create an Ingress resource if `true`.'
                          type: boolean
                        privileged:
                          description: If `true`, containers of Notebook will be privileged containers. It can be used in physical instances where it's necessary to access I/O devices on the host machine. Not recommended to activate this field on cloud instances.
                          type: boolean
                        resources:
                          description: Resource limitations of Notebook.
                          properties:
                            cpu:
                              description: CPU resource limit.
                              pattern: ^([0-9])+(m)$
                              type: string
                            gpuCore:
                              description: GPU core number that will be allocated.
                              type: integer
                            gpuInstance:
                              default: nvidia.com/gpu
                              description: GPU instance that will be allocated. eg. nvidia.com/mig-1g.5gb. Defaults to "nvidia.com/gpu".
                              type: string
                            memory:
                              description: Memory resource limit.
                              pattern: ^([0-9])+(Mi|Gi)$
                              type: string
                          type: object
                        serviceType:
                          default: NodePort
                          description: Service type of Notebook. `ClusterIP` and `NodePort` is supported.
                          enum:
                            - ClusterIP
                            - NodePort
                          type: string
                      type: object
                    remoteIDEEnabled:
                      description: If `true`, a relay server for remote Cloud IDE will be provisioned inside development suite.
                      type: boolean
                    remoteIDERelayServerTemplate:
                      description: Configurational parameters of remote IDE. Applied if `.spec.remoteIDEEnabled` is set to `true`.
                      properties:
                        hostname:
                          description: Hostname of the remote pod.
                          type: string
                        instanceName:
                          description: Remote instance name.
                          type: string
                        remoteNamespace:
                          description: Remote namespace.
                          type: string
                        remotePort:
                          description: Remote port.
                          type: integer
                        rootDNSConfig:
                          description: '[*alpha*] Root DNS configuration.'
                          properties:
                            host:
                              description: '[*alpha*] Root DNS name..'
                              type: string
                          required:
                            - host
                          type: object
                        subdomain:
                          description: Subdomain of the remote pod. It's also same with remote service's name.
                          type: string
                        tlsSecretRef:
                          description: '[*alpha*] TLS secret reference.'
                          properties:
                            name:
                              description: '[*alpha*] TLS secret object name.'
                              type: string
                            namespace:
                              description: '[*alpha*] TLS secret object namespace.'
                              type: string
                          required:
                            - name
                            - namespace
                          type: object
                      type: object
                    robotIDETemplate:
                      description: Configurational parameters of RobotIDE. Applied if `.spec.ideEnabled` is set to `true`.
                      properties:
                        display:
                          description: Cloud IDE connects an X11 socket if it's set to `true` and a target RobotVDI resource is set in labels with key `robolaunch.io/target-vdi`. Applications that requires GUI can be executed such as rViz.
                          type: boolean
                        ingress:
                          description: '[*alpha*] RobotIDE will create an Ingress resource if `true`.'
                          type: boolean
                        privileged:
                          description: If `true`, containers of RobotIDE will be privileged containers. It can be used in physical instances where it's necessary to access I/O devices on the host machine. Not recommended to activate this field on cloud instances.
                          type: boolean
                        resources:
                          description: Resource limitations of Cloud IDE.
                          properties:
                            cpu:
                              description: CPU resource limit.
                              pattern: ^([0-9])+(m)$
                              type: string
                            gpuCore:
                              description: GPU core number that will be allocated.
                              type: integer
                            gpuInstance:
                              default: nvidia.com/gpu
                              description: GPU instance that will be allocated. eg. nvidia.com/mig-1g.5gb. Defaults to "nvidia.com/gpu".
                              type: string
                            memory:
                              description: Memory resource limit.
                              pattern: ^([0-9])+(Mi|Gi)$
                              type: string
                          type: object
                        serviceType:
                          default: NodePort
                          description: Service type of Cloud IDE. `ClusterIP` and `NodePort` is supported.
                          enum:
                            - ClusterIP
                            - NodePort
                          type: string
                      type: object
                    robotVDITemplate:
                      description: Configurational parameters of RobotVDI. Applied if `.spec.vdiEnabled` is set to `true`.
                      properties:
                        disableNvenc:
                          description: If true, VDI uses plain h264 instead of nvh264enc.
                          type: boolean
                        ingress:
                          description: '[*alpha*] RobotIDE will create an Ingress resource if `true`.'
                          type: boolean
                        nat1to1:
                          description: NAT1TO1 option for Cloud VDI.
                          type: string
                        privileged:
                          description: If `true`, containers of RobotIDE will be privileged containers. It can be used in physical instances where it's necessary to access I/O devices on the host machine. Not recommended to activate this field on cloud instances.
                          type: boolean
                        resolution:
                          default: 2048x1152
                          description: VDI screen resolution options. Default is `2048x1152`.
                          enum:
                            - 2048x1152
                            - 1920x1080
                            - 1600x1200
                          type: string
                        resources:
                          description: Resource limitations of Cloud IDE.
                          properties:
                            cpu:
                              description: CPU resource limit.
                              pattern: ^([0-9])+(m)$
                              type: string
                            gpuCore:
                              description: GPU core number that will be allocated.
                              type: integer
                            gpuInstance:
                              default: nvidia.com/gpu
                              description: GPU instance that will be allocated. eg. nvidia.com/mig-1g.5gb. Defaults to "nvidia.com/gpu".
                              type: string
                            memory:
                              description: Memory resource limit.
                              pattern: ^([0-9])+(Mi|Gi)$
                              type: string
                          type: object
                        serviceType:
                          default: NodePort
                          description: Service type of Cloud IDE. `ClusterIP` and `NodePort` is supported.
                          enum:
                            - ClusterIP
                            - NodePort
                          type: string
                        webrtcPortRange:
                          description: UDP port range to used in WebRTC connections.
                          pattern: ^([0-9])+-([0-9])+$
                          type: string
                      type: object
                    vdiEnabled:
                      description: If `true`, a Cloud VDI will be provisioned inside development suite.
                      type: boolean
                  type: object
                rootDNSConfig:
                  description: '[*alpha*] Root DNS configuration.'
                  properties:
                    host:
                      description: '[*alpha*] Root DNS name..'
                      type: string
                  required:
                    - host
                  type: object
                storage:
                  description: Total storage amount to persist via Robot. Unit of measurement is MB. (eg. `10240` corresponds 10 GB) This amount is being shared between different components.
                  properties:
                    amount:
                      default: 10000
                      description: Specifies how much storage will be allocated in total. Use MB as a unit of measurement. (eg. `10240` is equal to 10 GB)
                      type: integer
                    storageClassConfig:
                      description: Storage class selection for robot's volumes.
                      properties:
                        accessMode:
                          description: PVC access modes. Currently, only `ReadWriteOnce` is supported.
                          type: string
                        name:
                          description: Storage class name.
                          type: string
                      type: object
                  type: object
                tlsSecretRef:
                  description: '[*alpha*] TLS secret reference.'
                  properties:
                    name:
                      description: '[*alpha*] TLS secret object name.'
                      type: string
                    namespace:
                      description: '[*alpha*] TLS secret object namespace.'
                      type: string
                  required:
                    - name
                    - namespace
                  type: object
                type:
                  description: Determines the object type. If "Environment", operator will provision an environment according to the specifications. (`.spec.environment`) If "Robot", operator will provision an environment specialized for ROS 2 according to the specifications. (`.spec.robot`)
                  type: string
                workspaceManagerTemplate:
                  description: Workspace manager template to configure ROS 2 workspaces.
                  properties:
                    updateNeeded:
                      description: WorkspaceManager is triggered if this field is set to `true`. Then the workspaces are being configured again while backing up the old configurations. This field is often used by operator.
                      type: boolean
                    workspaces:
                      description: Workspace definitions of robot. Multiple ROS 2 workspaces can be configured over this field.
                      items:
                        description: Workspace description. Each robot should contain at least one workspace. A workspace should contain at least one repository in it.
                        properties:
                          distro:
                            description: ROS 2 distribution selection. Currently supported distributions are Humble, Foxy, Galactic.
                            enum:
                              - foxy
                              - galactic
                              - humble
                            type: string
                          name:
                            description: Name of workspace. If a workspace's name is `my_ws`, it's absolute path is `/home/workspaces/my_ws`.
                            type: string
                          repositories:
                            additionalProperties:
                              description: Repository description.
                              properties:
                                branch:
                                  description: Branch of the repository to clone.
                                  type: string
                                hash:
                                  description: '[*Autofilled*] Hash of last commit'
                                  type: string
                                owner:
                                  description: '[*Autofilled*] User or organization, maintainer of repository'
                                  type: string
                                path:
                                  description: '[*Autofilled*] Absolute path of repository'
                                  type: string
                                repo:
                                  description: '[*Autofilled*] Repository name'
                                  type: string
                                url:
                                  description: Base URL of the repository.
                                  type: string
                              required:
                                - branch
                                - url
                              type: object
                            description: Repositories to clone inside workspace's `src` directory.
                            type: object
                        required:
                          - distro
                          - name
                          - repositories
                        type: object
                      minItems: 1
                      type: array
                    workspacesPath:
                      description: Global path of workspaces. It's fixed to `/root/workspaces` path.
                      type: string
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: robot-system/robot-serving-cert
    controller-gen.kubebuilder.io/version: v0.9.2
  name: robotdevsuites.robot.roboscale.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: robot-webhook-service
          namespace: robot-system
          path: /convert
      conversionReviewVersions:
        - v1
  group: robot.roboscale.io
  names:
    kind: RobotDevSuite
    listKind: RobotDevSuiteList
    plural: robotdevsuites
    singular: robotdevsuite
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.vdiEnabled
          name: VDI
          type: string
        - jsonPath: .spec.ideEnabled
          name: IDE
          type: string
        - jsonPath: .spec.remoteIDEEnabled
          name: Remote IDE RS
          type: string
        - jsonPath: .status.phase
          name: Phase
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: RobotDevSuite is a custom resource that creates dynamically configured development environments for robots.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired behavior of the RobotDevSuite.
              properties:
                ideEnabled:
                  description: If `true`, a Cloud IDE will be provisioned inside development suite.
                  type: boolean
                notebookEnabled:
                  description: If `true`, a Notebook will be provisioned inside development suite.
                  type: boolean
                notebookTemplate:
                  description: Configurational parameters of Notebook. Applied if `.spec.notebookEnabled` is set to `true`.
                  properties:
                    display:
                      description: Notebook connects an X11 socket if it's set to `true` and a target Notebook resource is set in labels with key `robolaunch.io/target-vdi`. Applications that requires GUI can be executed such as VLC.
                      type: boolean
                    ingress:
                      description: '[*alpha*] Notebook will create an Ingress resource if `true`.'
                      type: boolean
                    privileged:
                      description: If `true`, containers of Notebook will be privileged containers. It can be used in physical instances where it's necessary to access I/O devices on the host machine. Not recommended to activate this field on cloud instances.
                      type: boolean
                    resources:
                      description: Resource limitations of Notebook.
                      properties:
                        cpu:
                          description: CPU resource limit.
                          pattern: ^([0-9])+(m)$
                          type: string
                        gpuCore:
                          description: GPU core number that will be allocated.
                          type: integer
                        gpuInstance:
                          default: nvidia.com/gpu
                          description: GPU instance that will be allocated. eg. nvidia.com/mig-1g.5gb. Defaults to "nvidia.com/gpu".
                          type: string
                        memory:
                          description: Memory resource limit.
                          pattern: ^([0-9])+(Mi|Gi)$
                          type: string
                      type: object
                    serviceType:
                      default: NodePort
                      description: Service type of Notebook. `ClusterIP` and `NodePort` is supported.
                      enum:
                        - ClusterIP
                        - NodePort
                      type: string
                  type: object
                remoteIDEEnabled:
                  description: If `true`, a relay server for remote Cloud IDE will be provisioned inside development suite.
                  type: boolean
                remoteIDERelayServerTemplate:
                  description: Configurational parameters of remote IDE. Applied if `.spec.remoteIDEEnabled` is set to `true`.
                  properties:
                    hostname:
                      description: Hostname of the remote pod.
                      type: string
                    instanceName:
                      description: Remote instance name.
                      type: string
                    remoteNamespace:
                      description: Remote namespace.
                      type: string
                    remotePort:
                      description: Remote port.
                      type: integer
                    rootDNSConfig:
                      description: '[*alpha*] Root DNS configuration.'
                      properties:
                        host:
                          description: '[*alpha*] Root DNS name..'
                          type: string
                      required:
                        - host
                      type: object
                    subdomain:
                      description: Subdomain of the remote pod. It's also same with remote service's name.
                      type: string
                    tlsSecretRef:
                      description: '[*alpha*] TLS secret reference.'
                      properties:
                        name:
                          description: '[*alpha*] TLS secret object name.'
                          type: string
                        namespace:
                          description: '[*alpha*] TLS secret object namespace.'
                          type: string
                      required:
                        - name
                        - namespace
                      type: object
                  type: object
                robotIDETemplate:
                  description: Configurational parameters of RobotIDE. Applied if `.spec.ideEnabled` is set to `true`.
                  properties:
                    display:
                      description: Cloud IDE connects an X11 socket if it's set to `true` and a target RobotVDI resource is set in labels with key `robolaunch.io/target-vdi`. Applications that requires GUI can be executed such as rViz.
                      type: boolean
                    ingress:
                      description: '[*alpha*] RobotIDE will create an Ingress resource if `true`.'
                      type: boolean
                    privileged:
                      description: If `true`, containers of RobotIDE will be privileged containers. It can be used in physical instances where it's necessary to access I/O devices on the host machine. Not recommended to activate this field on cloud instances.
                      type: boolean
                    resources:
                      description: Resource limitations of Cloud IDE.
                      properties:
                        cpu:
                          description: CPU resource limit.
                          pattern: ^([0-9])+(m)$
                          type: string
                        gpuCore:
                          description: GPU core number that will be allocated.
                          type: integer
                        gpuInstance:
                          default: nvidia.com/gpu
                          description: GPU instance that will be allocated. eg. nvidia.com/mig-1g.5gb. Defaults to "nvidia.com/gpu".
                          type: string
                        memory:
                          description: Memory resource limit.
                          pattern: ^([0-9])+(Mi|Gi)$
                          type: string
                      type: object
                    serviceType:
                      default: NodePort
                      description: Service type of Cloud IDE. `ClusterIP` and `NodePort` is supported.
                      enum:
                        - ClusterIP
                        - NodePort
                      type: string
                  type: object
                robotVDITemplate:
                  description: Configurational parameters of RobotVDI. Applied if `.spec.vdiEnabled` is set to `true`.
                  properties:
                    disableNvenc:
                      description: If true, VDI uses plain h264 instead of nvh264enc.
                      type: boolean
                    ingress:
                      description: '[*alpha*] RobotIDE will create an Ingress resource if `true`.'
                      type: boolean
                    nat1to1:
                      description: NAT1TO1 option for Cloud VDI.
                      type: string
                    privileged:
                      description: If `true`, containers of RobotIDE will be privileged containers. It can be used in physical instances where it's necessary to access I/O devices on the host machine. Not recommended to activate this field on cloud instances.
                      type: boolean
                    resolution:
                      default: 2048x1152
                      description: VDI screen resolution options. Default is `2048x1152`.
                      enum:
                        - 2048x1152
                        - 1920x1080
                        - 1600x1200
                      type: string
                    resources:
                      description: Resource limitations of Cloud IDE.
                      properties:
                        cpu:
                          description: CPU resource limit.
                          pattern: ^([0-9])+(m)$
                          type: string
                        gpuCore:
                          description: GPU core number that will be allocated.
                          type: integer
                        gpuInstance:
                          default: nvidia.com/gpu
                          description: GPU instance that will be allocated. eg. nvidia.com/mig-1g.5gb. Defaults to "nvidia.com/gpu".
                          type: string
                        memory:
                          description: Memory resource limit.
                          pattern: ^([0-9])+(Mi|Gi)$
                          type: string
                      type: object
                    serviceType:
                      default: NodePort
                      description: Service type of Cloud IDE. `ClusterIP` and `NodePort` is supported.
                      enum:
                        - ClusterIP
                        - NodePort
                      type: string
                    webrtcPortRange:
                      description: UDP port range to used in WebRTC connections.
                      pattern: ^([0-9])+-([0-9])+$
                      type: string
                  type: object
                vdiEnabled:
                  description: If `true`, a Cloud VDI will be provisioned inside development suite.
                  type: boolean
              type: object
            status:
              description: Most recently observed status of the RobotDevSuite.
              properties:
                active:
                  description: '[*alpha*] Indicates if RobotDevSuite is attached to a Robot and actively provisioned it''s resources.'
                  type: boolean
                notebookStatus:
                  description: Status of Notebook.
                  properties:
                    connections:
                      additionalProperties:
                        type: string
                      description: Address of the robot service that can be reached from outside.
                      type: object
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                  type: object
                phase:
                  description: Phase of RobotDevSuite.
                  type: string
                remoteIDERelayServerStatus:
                  description: Status of remote Cloud IDE RelayServer. Created only if the instance type is Physical Instance.
                  properties:
                    connections:
                      additionalProperties:
                        type: string
                      description: Address of the robot service that can be reached from outside.
                      type: object
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                  type: object
                robotIDEStatus:
                  description: Status of RobotIDE.
                  properties:
                    connections:
                      additionalProperties:
                        type: string
                      description: Address of the robot service that can be reached from outside.
                      type: object
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                  type: object
                robotVDIStatus:
                  description: Status of RobotVDI.
                  properties:
                    connections:
                      additionalProperties:
                        type: string
                      description: Address of the robot service that can be reached from outside.
                      type: object
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: robotides.robot.roboscale.io
spec:
  group: robot.roboscale.io
  names:
    kind: RobotIDE
    listKind: RobotIDEList
    plural: robotides
    singular: robotide
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.display
          name: Display
          type: string
        - jsonPath: .spec.privileged
          name: Privileged
          type: string
        - jsonPath: .spec.resources.gpuCore
          name: GPU
          type: string
        - jsonPath: .status.phase
          name: Phase
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: RobotIDE creates and manages Cloud IDE resources and workloads.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired behavior of the RobotIDE.
              properties:
                display:
                  description: Cloud IDE connects an X11 socket if it's set to `true` and a target RobotVDI resource is set in labels with key `robolaunch.io/target-vdi`. Applications that requires GUI can be executed such as rViz.
                  type: boolean
                ingress:
                  description: '[*alpha*] RobotIDE will create an Ingress resource if `true`.'
                  type: boolean
                privileged:
                  description: If `true`, containers of RobotIDE will be privileged containers. It can be used in physical instances where it's necessary to access I/O devices on the host machine. Not recommended to activate this field on cloud instances.
                  type: boolean
                resources:
                  description: Resource limitations of Cloud IDE.
                  properties:
                    cpu:
                      description: CPU resource limit.
                      pattern: ^([0-9])+(m)$
                      type: string
                    gpuCore:
                      description: GPU core number that will be allocated.
                      type: integer
                    gpuInstance:
                      default: nvidia.com/gpu
                      description: GPU instance that will be allocated. eg. nvidia.com/mig-1g.5gb. Defaults to "nvidia.com/gpu".
                      type: string
                    memory:
                      description: Memory resource limit.
                      pattern: ^([0-9])+(Mi|Gi)$
                      type: string
                  type: object
                serviceType:
                  default: NodePort
                  description: Service type of Cloud IDE. `ClusterIP` and `NodePort` is supported.
                  enum:
                    - ClusterIP
                    - NodePort
                  type: string
              type: object
            status:
              description: Most recently observed status of the RobotIDE.
              properties:
                configMapStatus:
                  description: Config map status. It's used to add background apps.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                customPortIngressStatus:
                  description: Status of Cloud IDE ingress for custom ports service. Created only if the robot has an additional config with key `IDE_CUSTOM_PORT_RANGE` and `.spec.ingress` is `true`.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                customPortServiceStatus:
                  description: Status of Cloud IDE service for custom ports. Created only if the robot has an additional config with key `IDE_CUSTOM_PORT_RANGE`.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    urls:
                      additionalProperties:
                        type: string
                      description: Connection URL.
                      type: object
                  type: object
                ingressStatus:
                  description: Status of Cloud IDE Ingress.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                phase:
                  description: Phase of RobotIDE.
                  type: string
                podStatus:
                  description: Status of Cloud IDE pod.
                  properties:
                    ip:
                      description: IP of the pod.
                      type: string
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                  type: object
                serviceExportStatus:
                  description: Status of Cloud IDE ServiceExport. Created only if the instance type is Physical Instance.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                serviceStatus:
                  description: Status of Cloud IDE service.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    urls:
                      additionalProperties:
                        type: string
                      description: Connection URL.
                      type: object
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: robot-system/robot-serving-cert
    controller-gen.kubebuilder.io/version: v0.9.2
  name: robots.robot.roboscale.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: robot-webhook-service
          namespace: robot-system
          path: /convert
      conversionReviewVersions:
        - v1
  group: robot.roboscale.io
  names:
    kind: Robot
    listKind: RobotList
    plural: robots
    singular: robot
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.robot.distributions
          name: Distributions
          type: string
        - jsonPath: .spec.environment.application.name
          name: Application
          type: string
        - jsonPath: .spec.environment.application.version
          name: Version
          type: string
        - jsonPath: .spec.environment.devspace.ubuntuDistro
          name: Ubuntu
          type: string
        - jsonPath: .spec.environment.devspace.version
          name: DevSpace
          type: string
        - jsonPath: .status.phase
          name: Phase
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: Robot is the custom resource that contains ROS 2 components (Workloads, Cloud VDI, Cloud IDE, ROS Bridge, Configurational Resources), robolaunch Robot instances can be decomposed and distributed to both cloud instances and physical instances using federation.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired behavior of the Robot.
              properties:
                additionalConfigs:
                  additionalProperties:
                    properties:
                      configType:
                        default: Operator
                        description: Config type is by default `Operator`. Other options are `Env` and `File`.
                        type: string
                      value:
                        description: Value of the corresponding config key.
                        type: string
                    type: object
                  description: Key value pairs that operator uses to extend configuration.
                  type: object
                environment:
                  description: Holds environment's configuration. Applied if `.spec.type` is `Environment` and must be `nil` otherwise.
                  properties:
                    application:
                      description: Application properties.
                      properties:
                        name:
                          description: Application name.
                          type: string
                        version:
                          description: Version of the application.
                          type: string
                      required:
                        - name
                        - version
                      type: object
                    devspace:
                      description: DevSpace image properties.
                      properties:
                        desktop:
                          description: Ubuntu desktop.
                          type: string
                        ubuntuDistro:
                          description: Ubuntu distribution of the environment.
                          type: string
                        version:
                          description: DevSpace image version.
                          type: string
                      required:
                        - desktop
                        - ubuntuDistro
                        - version
                      type: object
                    domain:
                      description: Domain of the environment.
                      type: string
                  required:
                    - application
                    - devspace
                    - domain
                  type: object
                robot:
                  description: Holds robot's configuration. Applied if `.spec.type` is `Robot` and must be `nil` otherwise.
                  properties:
                    bridgeEnabled:
                      description: If enabled, ROSBridge object will be created.
                      type: boolean
                    discoveryServerTemplate:
                      description: Discovery server configurational parameters.
                      properties:
                        cluster:
                          description: Cloud instance name that holds DiscoveryServer instance with `Server` type. Should be empty if the type is `Server` since it takes cloud instance's name automatically. Should be set if the type is `Client`.
                          type: string
                        domainID:
                          description: ROS domain ID for robot. See https://docs.ros.org/en/foxy/Concepts/About-Domain-ID.html.
                          maximum: 101
                          minimum: 0
                          type: integer
                        hostname:
                          description: If instance type is `Server`, it can be an arbitrary value. If instance type is `Client`, it should be the same with Server's hostname. Used for getting Server's IP over DNS.
                          type: string
                        protocol:
                          enum:
                            - TCP
                            - UDP
                          type: string
                        reference:
                          description: Reference to the `Server` instance. It is used if `.spec.type` is `Client`. Referenced object can be previously provisioned in another cluster. In that case, cluster's name can be specified in `.spec.cluster` field.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        subdomain:
                          description: If instance type is `Server`, it can be an arbitrary value. If instance type is `Client`, it should be the same with Server's subdomain. Used for getting Server's IP over DNS.
                          type: string
                        type:
                          description: Instance type can be either `Server` or `Client`. If `Server`, instance creates discovery server resources and workloads. Other `Client` instances can connect to the `Server` instance. If `Client`, instance tries to connect a `Server` instance and hold `Server` configuration in a ConfigMap.
                          type: string
                      required:
                        - domainID
                      type: object
                    distributions:
                      description: ROS 2 distributions to be used. You can select multiple distributions if they are supported in the same underlying OS. (eg. `foxy` and `galactic` are supported in Ubuntu Focal, so they can be used together but both cannot be used with `humble`)
                      items:
                        description: ROS 2 distribution selection. Currently supported distributions are Humble, Foxy, Galactic.
                        enum:
                          - foxy
                          - galactic
                          - humble
                        type: string
                      maxItems: 2
                      minItems: 1
                      type: array
                    domainID:
                      description: ROS domain ID for robot. See https://docs.ros.org/en/foxy/Concepts/About-Domain-ID.html.
                      maximum: 101
                      minimum: 0
                      type: integer
                    rmwImplementation:
                      description: RMW implementation selection. Robot operator currently supports only FastRTPS. See https://docs.ros.org/en/foxy/How-To-Guides/Working-with-multiple-RMW-implementations.html.
                      enum:
                        - rmw_fastrtps_cpp
                      type: string
                    rosBridgeTemplate:
                      description: ROS bridge configurational parameters.
                      properties:
                        distro:
                          description: Configurational parameters for ROS 2 bridge.
                          enum:
                            - foxy
                            - galactic
                            - humble
                          type: string
                        ingress:
                          description: '[*alpha*] ROSBridge will create an Ingress resource if `true`.'
                          type: boolean
                        serviceType:
                          description: Service type of ROSBridge. `ClusterIP` and `NodePort` is supported.
                          enum:
                            - ClusterIP
                            - NodePort
                          type: string
                      type: object
                  required:
                    - domainID
                  type: object
                robotDevSuiteTemplate:
                  description: Robot development suite template
                  properties:
                    ideEnabled:
                      description: If `true`, a Cloud IDE will be provisioned inside development suite.
                      type: boolean
                    notebookEnabled:
                      description: If `true`, a Notebook will be provisioned inside development suite.
                      type: boolean
                    notebookTemplate:
                      description: Configurational parameters of Notebook. Applied if `.spec.notebookEnabled` is set to `true`.
                      properties:
                        display:
                          description: Notebook connects an X11 socket if it's set to `true` and a target Notebook resource is set in labels with key `robolaunch.io/target-vdi`. Applications that requires GUI can be executed such as VLC.
                          type: boolean
                        ingress:
                          description: '[*alpha*] Notebook will create an Ingress resource if `true`.'
                          type: boolean
                        privileged:
                          description: If `true`, containers of Notebook will be privileged containers. It can be used in physical instances where it's necessary to access I/O devices on the host machine. Not recommended to activate this field on cloud instances.
                          type: boolean
                        resources:
                          description: Resource limitations of Notebook.
                          properties:
                            cpu:
                              description: CPU resource limit.
                              pattern: ^([0-9])+(m)$
                              type: string
                            gpuCore:
                              description: GPU core number that will be allocated.
                              type: integer
                            gpuInstance:
                              default: nvidia.com/gpu
                              description: GPU instance that will be allocated. eg. nvidia.com/mig-1g.5gb. Defaults to "nvidia.com/gpu".
                              type: string
                            memory:
                              description: Memory resource limit.
                              pattern: ^([0-9])+(Mi|Gi)$
                              type: string
                          type: object
                        serviceType:
                          default: NodePort
                          description: Service type of Notebook. `ClusterIP` and `NodePort` is supported.
                          enum:
                            - ClusterIP
                            - NodePort
                          type: string
                      type: object
                    remoteIDEEnabled:
                      description: If `true`, a relay server for remote Cloud IDE will be provisioned inside development suite.
                      type: boolean
                    remoteIDERelayServerTemplate:
                      description: Configurational parameters of remote IDE. Applied if `.spec.remoteIDEEnabled` is set to `true`.
                      properties:
                        hostname:
                          description: Hostname of the remote pod.
                          type: string
                        instanceName:
                          description: Remote instance name.
                          type: string
                        remoteNamespace:
                          description: Remote namespace.
                          type: string
                        remotePort:
                          description: Remote port.
                          type: integer
                        rootDNSConfig:
                          description: '[*alpha*] Root DNS configuration.'
                          properties:
                            host:
                              description: '[*alpha*] Root DNS name..'
                              type: string
                          required:
                            - host
                          type: object
                        subdomain:
                          description: Subdomain of the remote pod. It's also same with remote service's name.
                          type: string
                        tlsSecretRef:
                          description: '[*alpha*] TLS secret reference.'
                          properties:
                            name:
                              description: '[*alpha*] TLS secret object name.'
                              type: string
                            namespace:
                              description: '[*alpha*] TLS secret object namespace.'
                              type: string
                          required:
                            - name
                            - namespace
                          type: object
                      type: object
                    robotIDETemplate:
                      description: Configurational parameters of RobotIDE. Applied if `.spec.ideEnabled` is set to `true`.
                      properties:
                        display:
                          description: Cloud IDE connects an X11 socket if it's set to `true` and a target RobotVDI resource is set in labels with key `robolaunch.io/target-vdi`. Applications that requires GUI can be executed such as rViz.
                          type: boolean
                        ingress:
                          description: '[*alpha*] RobotIDE will create an Ingress resource if `true`.'
                          type: boolean
                        privileged:
                          description: If `true`, containers of RobotIDE will be privileged containers. It can be used in physical instances where it's necessary to access I/O devices on the host machine. Not recommended to activate this field on cloud instances.
                          type: boolean
                        resources:
                          description: Resource limitations of Cloud IDE.
                          properties:
                            cpu:
                              description: CPU resource limit.
                              pattern: ^([0-9])+(m)$
                              type: string
                            gpuCore:
                              description: GPU core number that will be allocated.
                              type: integer
                            gpuInstance:
                              default: nvidia.com/gpu
                              description: GPU instance that will be allocated. eg. nvidia.com/mig-1g.5gb. Defaults to "nvidia.com/gpu".
                              type: string
                            memory:
                              description: Memory resource limit.
                              pattern: ^([0-9])+(Mi|Gi)$
                              type: string
                          type: object
                        serviceType:
                          default: NodePort
                          description: Service type of Cloud IDE. `ClusterIP` and `NodePort` is supported.
                          enum:
                            - ClusterIP
                            - NodePort
                          type: string
                      type: object
                    robotVDITemplate:
                      description: Configurational parameters of RobotVDI. Applied if `.spec.vdiEnabled` is set to `true`.
                      properties:
                        disableNvenc:
                          description: If true, VDI uses plain h264 instead of nvh264enc.
                          type: boolean
                        ingress:
                          description: '[*alpha*] RobotIDE will create an Ingress resource if `true`.'
                          type: boolean
                        nat1to1:
                          description: NAT1TO1 option for Cloud VDI.
                          type: string
                        privileged:
                          description: If `true`, containers of RobotIDE will be privileged containers. It can be used in physical instances where it's necessary to access I/O devices on the host machine. Not recommended to activate this field on cloud instances.
                          type: boolean
                        resolution:
                          default: 2048x1152
                          description: VDI screen resolution options. Default is `2048x1152`.
                          enum:
                            - 2048x1152
                            - 1920x1080
                            - 1600x1200
                          type: string
                        resources:
                          description: Resource limitations of Cloud IDE.
                          properties:
                            cpu:
                              description: CPU resource limit.
                              pattern: ^([0-9])+(m)$
                              type: string
                            gpuCore:
                              description: GPU core number that will be allocated.
                              type: integer
                            gpuInstance:
                              default: nvidia.com/gpu
                              description: GPU instance that will be allocated. eg. nvidia.com/mig-1g.5gb. Defaults to "nvidia.com/gpu".
                              type: string
                            memory:
                              description: Memory resource limit.
                              pattern: ^([0-9])+(Mi|Gi)$
                              type: string
                          type: object
                        serviceType:
                          default: NodePort
                          description: Service type of Cloud IDE. `ClusterIP` and `NodePort` is supported.
                          enum:
                            - ClusterIP
                            - NodePort
                          type: string
                        webrtcPortRange:
                          description: UDP port range to used in WebRTC connections.
                          pattern: ^([0-9])+-([0-9])+$
                          type: string
                      type: object
                    vdiEnabled:
                      description: If `true`, a Cloud VDI will be provisioned inside development suite.
                      type: boolean
                  type: object
                rootDNSConfig:
                  description: '[*alpha*] Root DNS configuration.'
                  properties:
                    host:
                      description: '[*alpha*] Root DNS name..'
                      type: string
                  required:
                    - host
                  type: object
                storage:
                  description: Total storage amount to persist via Robot. Unit of measurement is MB. (eg. `10240` corresponds 10 GB) This amount is being shared between different components.
                  properties:
                    amount:
                      default: 10000
                      description: Specifies how much storage will be allocated in total. Use MB as a unit of measurement. (eg. `10240` is equal to 10 GB)
                      type: integer
                    storageClassConfig:
                      description: Storage class selection for robot's volumes.
                      properties:
                        accessMode:
                          description: PVC access modes. Currently, only `ReadWriteOnce` is supported.
                          type: string
                        name:
                          description: Storage class name.
                          type: string
                      type: object
                  type: object
                tlsSecretRef:
                  description: '[*alpha*] TLS secret reference.'
                  properties:
                    name:
                      description: '[*alpha*] TLS secret object name.'
                      type: string
                    namespace:
                      description: '[*alpha*] TLS secret object namespace.'
                      type: string
                  required:
                    - name
                    - namespace
                  type: object
                type:
                  description: Determines the object type. If "Environment", operator will provision an environment according to the specifications. (`.spec.environment`) If "Robot", operator will provision an environment specialized for ROS 2 according to the specifications. (`.spec.robot`)
                  type: string
                workspaceManagerTemplate:
                  description: Workspace manager template to configure ROS 2 workspaces.
                  properties:
                    updateNeeded:
                      description: WorkspaceManager is triggered if this field is set to `true`. Then the workspaces are being configured again while backing up the old configurations. This field is often used by operator.
                      type: boolean
                    workspaces:
                      description: Workspace definitions of robot. Multiple ROS 2 workspaces can be configured over this field.
                      items:
                        description: Workspace description. Each robot should contain at least one workspace. A workspace should contain at least one repository in it.
                        properties:
                          distro:
                            description: ROS 2 distribution selection. Currently supported distributions are Humble, Foxy, Galactic.
                            enum:
                              - foxy
                              - galactic
                              - humble
                            type: string
                          name:
                            description: Name of workspace. If a workspace's name is `my_ws`, it's absolute path is `/home/workspaces/my_ws`.
                            type: string
                          repositories:
                            additionalProperties:
                              description: Repository description.
                              properties:
                                branch:
                                  description: Branch of the repository to clone.
                                  type: string
                                hash:
                                  description: '[*Autofilled*] Hash of last commit'
                                  type: string
                                owner:
                                  description: '[*Autofilled*] User or organization, maintainer of repository'
                                  type: string
                                path:
                                  description: '[*Autofilled*] Absolute path of repository'
                                  type: string
                                repo:
                                  description: '[*Autofilled*] Repository name'
                                  type: string
                                url:
                                  description: Base URL of the repository.
                                  type: string
                              required:
                                - branch
                                - url
                              type: object
                            description: Repositories to clone inside workspace's `src` directory.
                            type: object
                        required:
                          - distro
                          - name
                          - repositories
                        type: object
                      minItems: 1
                      type: array
                    workspacesPath:
                      description: Global path of workspaces. It's fixed to `/root/workspaces` path.
                      type: string
                  type: object
              type: object
            status:
              description: Most recently observed status of the Robot.
              properties:
                attachedBuildObject:
                  description: Attached build object information. A BuildManager can be attached with a label on it with key `robolaunch.io/target-robot` and value of the target robot's name. Robot sorts the BuildManagers targeted itself, and picks the last created object to process.
                  properties:
                    reference:
                      description: Reference to the BuildManager instance.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    status:
                      description: Status of attached BuildManager.
                      properties:
                        active:
                          description: Indicates if the BuildManager is currently executing it's jobs.
                          type: boolean
                        phase:
                          description: Phase of BuildManager.
                          type: string
                        scriptConfigMapStatus:
                          description: Status of the ConfigMap that holds scripts. If a script is specified inside `.spec.steps[k]`, they are mounted to the step jobs via this ConfigMap.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                        steps:
                          description: Statuses of the build steps.
                          items:
                            properties:
                              resource:
                                description: Generic status for any owned resource.
                                properties:
                                  created:
                                    description: Shows if the owned resource is created.
                                    type: boolean
                                  phase:
                                    description: Phase of the owned resource.
                                    type: string
                                  reference:
                                    description: Reference to the owned resource.
                                    properties:
                                      apiVersion:
                                        description: API version of the referent.
                                        type: string
                                      fieldPath:
                                        description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                        type: string
                                      kind:
                                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                      namespace:
                                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                        type: string
                                      resourceVersion:
                                        description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                        type: string
                                      uid:
                                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                        type: string
                                    type: object
                                    x-kubernetes-map-type: atomic
                                required:
                                  - created
                                type: object
                              step:
                                description: Status of the step.
                                properties:
                                  command:
                                    description: Bash command to run. Assume that your command will be `/bin/bash -c <COMMAND>`. Use logical operators (eg. `&&`) and pipes if the multiple dependent commands will be executed.
                                    type: string
                                  env:
                                    description: Environment variables for step.
                                    items:
                                      description: EnvVar represents an environment variable present in a Container.
                                      properties:
                                        name:
                                          description: Name of the environment variable. Must be a C_IDENTIFIER.
                                          type: string
                                        value:
                                          description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                                          type: string
                                        valueFrom:
                                          description: Source for the environment variable's value. Cannot be used if value is not empty.
                                          properties:
                                            configMapKeyRef:
                                              description: Selects a key of a ConfigMap.
                                              properties:
                                                key:
                                                  description: The key to select.
                                                  type: string
                                                name:
                                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                                  type: string
                                                optional:
                                                  description: Specify whether the ConfigMap or its key must be defined
                                                  type: boolean
                                              required:
                                                - key
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            fieldRef:
                                              description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                                              properties:
                                                apiVersion:
                                                  description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                                  type: string
                                                fieldPath:
                                                  description: Path of the field to select in the specified API version.
                                                  type: string
                                              required:
                                                - fieldPath
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            resourceFieldRef:
                                              description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                                              properties:
                                                containerName:
                                                  description: 'Container name: required for volumes, optional for env vars'
                                                  type: string
                                                divisor:
                                                  anyOf:
                                                    - type: integer
                                                    - type: string
                                                  description: Specifies the output format of the exposed resources, defaults to "1"
                                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                  x-kubernetes-int-or-string: true
                                                resource:
                                                  description: 'Required: resource to select'
                                                  type: string
                                              required:
                                                - resource
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            secretKeyRef:
                                              description: Selects a key of a secret in the pod's namespace
                                              properties:
                                                key:
                                                  description: The key of the secret to select from.  Must be a valid secret key.
                                                  type: string
                                                name:
                                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                                  type: string
                                                optional:
                                                  description: Specify whether the Secret or its key must be defined
                                                  type: boolean
                                              required:
                                                - key
                                              type: object
                                              x-kubernetes-map-type: atomic
                                          type: object
                                      required:
                                        - name
                                      type: object
                                    type: array
                                  instances:
                                    description: Cluster selector. If the current instance name is on the list, BuildManager creates building jobs.
                                    items:
                                      type: string
                                    type: array
                                  name:
                                    description: Name of the step.
                                    type: string
                                  scope:
                                    description: Selects the scope for BuildManager step.
                                    properties:
                                      path:
                                        description: Absolute path of the directory. It's being applied if the scope type is `Path`.
                                        type: string
                                      scopeType:
                                        description: Type of the scope. Allowed scopes are `Workspace` and `Path`.
                                        enum:
                                          - Workspace
                                          - Path
                                        type: string
                                      workspace:
                                        description: Name of the workspace. Should be selected among the existing workspaces in WorkspaceManager's manifests. It's being applied if the scope type is `Workspace`.
                                        type: string
                                    required:
                                      - scopeType
                                    type: object
                                  script:
                                    description: Bash script to run.
                                    type: string
                                required:
                                  - name
                                  - scope
                                type: object
                            type: object
                          type: array
                      type: object
                  type: object
                attachedDevObjects:
                  description: '[*alpha*] Attached dev object information.'
                  items:
                    properties:
                      reference:
                        description: Reference to the RobotDevSuite instance.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      status:
                        description: Status of attached RobotDevSuite.
                        properties:
                          active:
                            description: '[*alpha*] Indicates if RobotDevSuite is attached to a Robot and actively provisioned it''s resources.'
                            type: boolean
                          notebookStatus:
                            description: Status of Notebook.
                            properties:
                              connections:
                                additionalProperties:
                                  type: string
                                description: Address of the robot service that can be reached from outside.
                                type: object
                              resource:
                                description: Generic status for any owned resource.
                                properties:
                                  created:
                                    description: Shows if the owned resource is created.
                                    type: boolean
                                  phase:
                                    description: Phase of the owned resource.
                                    type: string
                                  reference:
                                    description: Reference to the owned resource.
                                    properties:
                                      apiVersion:
                                        description: API version of the referent.
                                        type: string
                                      fieldPath:
                                        description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                        type: string
                                      kind:
                                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                      namespace:
                                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                        type: string
                                      resourceVersion:
                                        description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                        type: string
                                      uid:
                                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                        type: string
                                    type: object
                                    x-kubernetes-map-type: atomic
                                required:
                                  - created
                                type: object
                            type: object
                          phase:
                            description: Phase of RobotDevSuite.
                            type: string
                          remoteIDERelayServerStatus:
                            description: Status of remote Cloud IDE RelayServer. Created only if the instance type is Physical Instance.
                            properties:
                              connections:
                                additionalProperties:
                                  type: string
                                description: Address of the robot service that can be reached from outside.
                                type: object
                              resource:
                                description: Generic status for any owned resource.
                                properties:
                                  created:
                                    description: Shows if the owned resource is created.
                                    type: boolean
                                  phase:
                                    description: Phase of the owned resource.
                                    type: string
                                  reference:
                                    description: Reference to the owned resource.
                                    properties:
                                      apiVersion:
                                        description: API version of the referent.
                                        type: string
                                      fieldPath:
                                        description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                        type: string
                                      kind:
                                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                      namespace:
                                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                        type: string
                                      resourceVersion:
                                        description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                        type: string
                                      uid:
                                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                        type: string
                                    type: object
                                    x-kubernetes-map-type: atomic
                                required:
                                  - created
                                type: object
                            type: object
                          robotIDEStatus:
                            description: Status of RobotIDE.
                            properties:
                              connections:
                                additionalProperties:
                                  type: string
                                description: Address of the robot service that can be reached from outside.
                                type: object
                              resource:
                                description: Generic status for any owned resource.
                                properties:
                                  created:
                                    description: Shows if the owned resource is created.
                                    type: boolean
                                  phase:
                                    description: Phase of the owned resource.
                                    type: string
                                  reference:
                                    description: Reference to the owned resource.
                                    properties:
                                      apiVersion:
                                        description: API version of the referent.
                                        type: string
                                      fieldPath:
                                        description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                        type: string
                                      kind:
                                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                      namespace:
                                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                        type: string
                                      resourceVersion:
                                        description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                        type: string
                                      uid:
                                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                        type: string
                                    type: object
                                    x-kubernetes-map-type: atomic
                                required:
                                  - created
                                type: object
                            type: object
                          robotVDIStatus:
                            description: Status of RobotVDI.
                            properties:
                              connections:
                                additionalProperties:
                                  type: string
                                description: Address of the robot service that can be reached from outside.
                                type: object
                              resource:
                                description: Generic status for any owned resource.
                                properties:
                                  created:
                                    description: Shows if the owned resource is created.
                                    type: boolean
                                  phase:
                                    description: Phase of the owned resource.
                                    type: string
                                  reference:
                                    description: Reference to the owned resource.
                                    properties:
                                      apiVersion:
                                        description: API version of the referent.
                                        type: string
                                      fieldPath:
                                        description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                        type: string
                                      kind:
                                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                      namespace:
                                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                        type: string
                                      resourceVersion:
                                        description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                        type: string
                                      uid:
                                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                        type: string
                                    type: object
                                    x-kubernetes-map-type: atomic
                                required:
                                  - created
                                type: object
                            type: object
                        type: object
                    type: object
                  type: array
                attachedLaunchObjects:
                  description: Attached launch object information. A LaunchManager can be attached with a label on it with key `robolaunch.io/target-robot` and value of the target robot's name. Multiple LaunchManager could work together if they targeted the same Robot.
                  items:
                    properties:
                      reference:
                        description: Reference to the LaunchManager instance.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      status:
                        description: Status of attached LaunchManager.
                        properties:
                          active:
                            description: Indicates if the LaunchManager is attached to a Robot and actively running.
                            type: boolean
                          launchPodStatus:
                            description: Collective statuses of launch pod and launch objects.
                            properties:
                              launchStatus:
                                additionalProperties:
                                  properties:
                                    active:
                                      description: Inditaces if the launch process are actively running on cluster. It may not be selected by launch cluster selectors.
                                      type: boolean
                                    containerStatus:
                                      description: Statuses of the containers of pods owned by LaunchManager.
                                      properties:
                                        containerID:
                                          description: Container's ID in the format '<type>://<container_id>'.
                                          type: string
                                        image:
                                          description: 'The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.'
                                          type: string
                                        imageID:
                                          description: ImageID of the container's image.
                                          type: string
                                        lastState:
                                          description: Details about the container's last termination condition.
                                          properties:
                                            running:
                                              description: Details about a running container
                                              properties:
                                                startedAt:
                                                  description: Time at which the container was last (re-)started
                                                  format: date-time
                                                  type: string
                                              type: object
                                            terminated:
                                              description: Details about a terminated container
                                              properties:
                                                containerID:
                                                  description: Container's ID in the format '<type>://<container_id>'
                                                  type: string
                                                exitCode:
                                                  description: Exit status from the last termination of the container
                                                  format: int32
                                                  type: integer
                                                finishedAt:
                                                  description: Time at which the container last terminated
                                                  format: date-time
                                                  type: string
                                                message:
                                                  description: Message regarding the last termination of the container
                                                  type: string
                                                reason:
                                                  description: (brief) reason from the last termination of the container
                                                  type: string
                                                signal:
                                                  description: Signal from the last termination of the container
                                                  format: int32
                                                  type: integer
                                                startedAt:
                                                  description: Time at which previous execution of the container started
                                                  format: date-time
                                                  type: string
                                              required:
                                                - exitCode
                                              type: object
                                            waiting:
                                              description: Details about a waiting container
                                              properties:
                                                message:
                                                  description: Message regarding why the container is not yet running.
                                                  type: string
                                                reason:
                                                  description: (brief) reason the container is not yet running.
                                                  type: string
                                              type: object
                                          type: object
                                        name:
                                          description: This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
                                          type: string
                                        ready:
                                          description: Specifies whether the container has passed its readiness probe.
                                          type: boolean
                                        restartCount:
                                          description: The number of times the container has been restarted.
                                          format: int32
                                          type: integer
                                        started:
                                          description: Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
                                          type: boolean
                                        state:
                                          description: Details about the container's current condition.
                                          properties:
                                            running:
                                              description: Details about a running container
                                              properties:
                                                startedAt:
                                                  description: Time at which the container was last (re-)started
                                                  format: date-time
                                                  type: string
                                              type: object
                                            terminated:
                                              description: Details about a terminated container
                                              properties:
                                                containerID:
                                                  description: Container's ID in the format '<type>://<container_id>'
                                                  type: string
                                                exitCode:
                                                  description: Exit status from the last termination of the container
                                                  format: int32
                                                  type: integer
                                                finishedAt:
                                                  description: Time at which the container last terminated
                                                  format: date-time
                                                  type: string
                                                message:
                                                  description: Message regarding the last termination of the container
                                                  type: string
                                                reason:
                                                  description: (brief) reason from the last termination of the container
                                                  type: string
                                                signal:
                                                  description: Signal from the last termination of the container
                                                  format: int32
                                                  type: integer
                                                startedAt:
                                                  description: Time at which previous execution of the container started
                                                  format: date-time
                                                  type: string
                                              required:
                                                - exitCode
                                              type: object
                                            waiting:
                                              description: Details about a waiting container
                                              properties:
                                                message:
                                                  description: Message regarding why the container is not yet running.
                                                  type: string
                                                reason:
                                                  description: (brief) reason the container is not yet running.
                                                  type: string
                                              type: object
                                          type: object
                                      required:
                                        - image
                                        - imageID
                                        - name
                                        - ready
                                        - restartCount
                                      type: object
                                  type: object
                                description: Status of launch objects. Every launch object generates a `ros2 launch` command that will run as an entrypoint in a container.
                                type: object
                              status:
                                description: Launch pod status. Every LaunchManager creates one pod if active.
                                properties:
                                  ip:
                                    description: IP of the pod.
                                    type: string
                                  resource:
                                    description: Generic status for any owned resource.
                                    properties:
                                      created:
                                        description: Shows if the owned resource is created.
                                        type: boolean
                                      phase:
                                        description: Phase of the owned resource.
                                        type: string
                                      reference:
                                        description: Reference to the owned resource.
                                        properties:
                                          apiVersion:
                                            description: API version of the referent.
                                            type: string
                                          fieldPath:
                                            description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                            type: string
                                          kind:
                                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                            type: string
                                          name:
                                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                            type: string
                                          namespace:
                                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                            type: string
                                          resourceVersion:
                                            description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                            type: string
                                          uid:
                                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                            type: string
                                        type: object
                                        x-kubernetes-map-type: atomic
                                    required:
                                      - created
                                    type: object
                                type: object
                            type: object
                          phase:
                            description: Phase of LaunchManager.
                            type: string
                        type: object
                    type: object
                  type: array
                discoveryServerStatus:
                  description: Discovery server instance status.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    status:
                      description: Status of the DiscoveryServer instance.
                      properties:
                        configMapStatus:
                          description: Status of the DiscoveryServer config map.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                        connectionInfo:
                          description: Connection information.
                          properties:
                            configMapName:
                              description: Name of the config map that holds discovery server configuration.
                              type: string
                            ip:
                              description: IP of the discovery server. IP is being obtained from the DNS name, which is being built according to the discovery server configuration.
                              type: string
                            uri:
                              description: URI of the discovery server. Discovery server instance tries to ping this address to see if it's reachable.
                              type: string
                          type: object
                        phase:
                          description: Phase of the DiscoveryServer.
                          type: string
                        podStatus:
                          description: Status of the DiscoveryServer pod.
                          properties:
                            ip:
                              description: IP of the pod.
                              type: string
                            resource:
                              description: Generic status for any owned resource.
                              properties:
                                created:
                                  description: Shows if the owned resource is created.
                                  type: boolean
                                phase:
                                  description: Phase of the owned resource.
                                  type: string
                                reference:
                                  description: Reference to the owned resource.
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                                - created
                              type: object
                          type: object
                        serviceExportStatus:
                          description: Status of the DiscoveryServer ServiceExport.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                        serviceStatus:
                          description: Status of the DiscoveryServer service.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                      type: object
                  type: object
                hostDirs:
                  description: '[*alpha*] List of directories mounted from host.'
                  items:
                    properties:
                      hostPath:
                        type: string
                      internalPath:
                        type: string
                      name:
                        type: string
                    type: object
                  type: array
                image:
                  description: Main image of Robot. It is derived either from the specifications or determined directly over labels.
                  type: string
                loaderJobStatus:
                  description: Status of loader job that configures environment.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                nodeName:
                  description: Node that Robot uses. It is selected via tenancy labels.
                  type: string
                persistentDirs:
                  description: '[*alpha*] Status of PVCs of persistent directories.'
                  items:
                    properties:
                      path:
                        type: string
                      status:
                        description: Generic status for any owned resource.
                        properties:
                          created:
                            description: Shows if the owned resource is created.
                            type: boolean
                          phase:
                            description: Phase of the owned resource.
                            type: string
                          reference:
                            description: Reference to the owned resource.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                          - created
                        type: object
                    type: object
                  type: array
                phase:
                  description: Phase of Robot. It sums the general status of Robot.
                  type: string
                robotDevSuiteStatus:
                  description: Robot development suite instance status.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    status:
                      description: Status of the RobotDevSuite instance.
                      properties:
                        active:
                          description: '[*alpha*] Indicates if RobotDevSuite is attached to a Robot and actively provisioned it''s resources.'
                          type: boolean
                        notebookStatus:
                          description: Status of Notebook.
                          properties:
                            connections:
                              additionalProperties:
                                type: string
                              description: Address of the robot service that can be reached from outside.
                              type: object
                            resource:
                              description: Generic status for any owned resource.
                              properties:
                                created:
                                  description: Shows if the owned resource is created.
                                  type: boolean
                                phase:
                                  description: Phase of the owned resource.
                                  type: string
                                reference:
                                  description: Reference to the owned resource.
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                                - created
                              type: object
                          type: object
                        phase:
                          description: Phase of RobotDevSuite.
                          type: string
                        remoteIDERelayServerStatus:
                          description: Status of remote Cloud IDE RelayServer. Created only if the instance type is Physical Instance.
                          properties:
                            connections:
                              additionalProperties:
                                type: string
                              description: Address of the robot service that can be reached from outside.
                              type: object
                            resource:
                              description: Generic status for any owned resource.
                              properties:
                                created:
                                  description: Shows if the owned resource is created.
                                  type: boolean
                                phase:
                                  description: Phase of the owned resource.
                                  type: string
                                reference:
                                  description: Reference to the owned resource.
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                                - created
                              type: object
                          type: object
                        robotIDEStatus:
                          description: Status of RobotIDE.
                          properties:
                            connections:
                              additionalProperties:
                                type: string
                              description: Address of the robot service that can be reached from outside.
                              type: object
                            resource:
                              description: Generic status for any owned resource.
                              properties:
                                created:
                                  description: Shows if the owned resource is created.
                                  type: boolean
                                phase:
                                  description: Phase of the owned resource.
                                  type: string
                                reference:
                                  description: Reference to the owned resource.
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                                - created
                              type: object
                          type: object
                        robotVDIStatus:
                          description: Status of RobotVDI.
                          properties:
                            connections:
                              additionalProperties:
                                type: string
                              description: Address of the robot service that can be reached from outside.
                              type: object
                            resource:
                              description: Generic status for any owned resource.
                              properties:
                                created:
                                  description: Shows if the owned resource is created.
                                  type: boolean
                                phase:
                                  description: Phase of the owned resource.
                                  type: string
                                reference:
                                  description: Reference to the owned resource.
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                                - created
                              type: object
                          type: object
                      type: object
                  type: object
                rosBridgeStatus:
                  description: ROS bridge instance status.
                  properties:
                    connection:
                      description: Address of the robot service that can be reached from outside.
                      type: string
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    status:
                      description: Status of the ROSBridge instance.
                      properties:
                        ingressStatus:
                          description: Status of ROSBridge Ingress.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                        phase:
                          description: Phase of ROSBridge.
                          type: string
                        podStatus:
                          description: Status of ROSBridge pod.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                        serviceStatus:
                          description: Status of ROSBridge service.
                          properties:
                            resource:
                              description: Generic status for any owned resource.
                              properties:
                                created:
                                  description: Shows if the owned resource is created.
                                  type: boolean
                                phase:
                                  description: Phase of the owned resource.
                                  type: string
                                reference:
                                  description: Reference to the owned resource.
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                                - created
                              type: object
                            urls:
                              additionalProperties:
                                type: string
                              description: Connection URL.
                              type: object
                          type: object
                      type: object
                  type: object
                uid:
                  description: User ID of robolaunch user in image.
                  format: int64
                  type: integer
                workspaceManagerStatus:
                  description: Workspace manager instance status if exists.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    status:
                      description: Status of the WorkspaceManager instance.
                      properties:
                        cleanupJobStatus:
                          description: Status of cleanup jobs that runs while reconfiguring workspaces.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                        clonerJobStatus:
                          description: Status of cloner job.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                        phase:
                          description: Phase of WorkspaceManager.
                          type: string
                        version:
                          description: Incremental version of workspace configuration map. Used to determine changes in configuration.
                          type: integer
                      type: object
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: robot-system/robot-serving-cert
    controller-gen.kubebuilder.io/version: v0.9.2
  name: robotvdis.robot.roboscale.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: robot-webhook-service
          namespace: robot-system
          path: /convert
      conversionReviewVersions:
        - v1
  group: robot.roboscale.io
  names:
    kind: RobotVDI
    listKind: RobotVDIList
    plural: robotvdis
    singular: robotvdi
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.resolution
          name: Resolution
          type: string
        - jsonPath: .spec.webrtcPortRange
          name: Ports
          type: string
        - jsonPath: .spec.privileged
          name: Privileged
          type: string
        - jsonPath: .spec.resources.gpuCore
          name: GPU
          type: string
        - jsonPath: .status.phase
          name: Phase
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: RobotVDI creates and manages Cloud VDI resources and workloads.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired behavior of the RobotVDI.
              properties:
                disableNvenc:
                  description: If true, VDI uses plain h264 instead of nvh264enc.
                  type: boolean
                ingress:
                  description: '[*alpha*] RobotIDE will create an Ingress resource if `true`.'
                  type: boolean
                nat1to1:
                  description: NAT1TO1 option for Cloud VDI.
                  type: string
                privileged:
                  description: If `true`, containers of RobotIDE will be privileged containers. It can be used in physical instances where it's necessary to access I/O devices on the host machine. Not recommended to activate this field on cloud instances.
                  type: boolean
                resolution:
                  default: 2048x1152
                  description: VDI screen resolution options. Default is `2048x1152`.
                  enum:
                    - 2048x1152
                    - 1920x1080
                    - 1600x1200
                  type: string
                resources:
                  description: Resource limitations of Cloud IDE.
                  properties:
                    cpu:
                      description: CPU resource limit.
                      pattern: ^([0-9])+(m)$
                      type: string
                    gpuCore:
                      description: GPU core number that will be allocated.
                      type: integer
                    gpuInstance:
                      default: nvidia.com/gpu
                      description: GPU instance that will be allocated. eg. nvidia.com/mig-1g.5gb. Defaults to "nvidia.com/gpu".
                      type: string
                    memory:
                      description: Memory resource limit.
                      pattern: ^([0-9])+(Mi|Gi)$
                      type: string
                  type: object
                serviceType:
                  default: NodePort
                  description: Service type of Cloud IDE. `ClusterIP` and `NodePort` is supported.
                  enum:
                    - ClusterIP
                    - NodePort
                  type: string
                webrtcPortRange:
                  description: UDP port range to used in WebRTC connections.
                  pattern: ^([0-9])+-([0-9])+$
                  type: string
              type: object
            status:
              description: Most recently observed status of the RobotVDI.
              properties:
                customPortIngressStatus:
                  description: Status of Cloud IDE ingress for custom ports service. Created only if the robot has an additional config with key `IDE_CUSTOM_PORT_RANGE` and `.spec.ingress` is `true`.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                customPortServiceStatus:
                  description: Status of Cloud IDE service for custom ports. Created only if the robot has an additional config with key `IDE_CUSTOM_PORT_RANGE`.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    urls:
                      additionalProperties:
                        type: string
                      description: Connection URL.
                      type: object
                  type: object
                ingressStatus:
                  description: Status of Cloud VDI Ingress.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                phase:
                  description: Phase of RobotVDI.
                  type: string
                podStatus:
                  description: Status of Cloud VDI pod.
                  properties:
                    ip:
                      description: IP of the pod.
                      type: string
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                  type: object
                pvcStatus:
                  description: Status of Cloud VDI persistent volume claim. This PVC dynamically provisions a volume that is a shared between RobotVDI workloads and other workloads that requests display.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                serviceTCPStatus:
                  description: Status of Cloud VDI TCP service.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    urls:
                      additionalProperties:
                        type: string
                      description: Connection URL.
                      type: object
                  type: object
                serviceUDPStatus:
                  description: Status of Cloud VDI UDP service.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: ros2bridges.robot.roboscale.io
spec:
  group: robot.roboscale.io
  names:
    kind: ROS2Bridge
    listKind: ROS2BridgeList
    plural: ros2bridges
    singular: ros2bridge
  scope: Namespaced
  versions:
    - name: v1alpha2
      schema:
        openAPIV3Schema:
          description: ROS2Bridge is the Schema for the ros2bridges API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired behavior of the ROS2Bridge.
              properties:
                discoveryServerRef:
                  description: Object reference to DiscoveryServer.
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                distro:
                  description: Configurational parameters for ROS 2 bridge.
                  enum:
                    - foxy
                    - galactic
                    - humble
                  type: string
                ingress:
                  description: ROS2Bridge will create an Ingress resource if `true`.
                  type: boolean
                serviceType:
                  default: ClusterIP
                  description: Service type of ROS2Bridge. `ClusterIP` and `NodePort` is supported.
                  enum:
                    - ClusterIP
                    - NodePort
                  type: string
                tlsSecretName:
                  description: Name of the TLS secret.
                  type: string
              required:
                - distro
              type: object
            status:
              description: Most recently observed status of the ROS2Bridge.
              properties:
                connectionInfo:
                  description: Connection info obtained from DiscoveryServer.
                  properties:
                    configMapName:
                      description: Name of the config map that holds discovery server configuration.
                      type: string
                    ip:
                      description: IP of the discovery server. IP is being obtained from the DNS name, which is being built according to the discovery server configuration.
                      type: string
                    uri:
                      description: URI of the discovery server. Discovery server instance tries to ping this address to see if it's reachable.
                      type: string
                  type: object
                ingressStatus:
                  description: Status of ROS2Bridge Ingress.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                phase:
                  description: Phase of ROS2Bridge.
                  type: string
                podStatus:
                  description: Status of ROS2Bridge pod.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                serviceStatus:
                  description: Status of ROS2Bridge service.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    urls:
                      additionalProperties:
                        type: string
                      description: Connection URL.
                      type: object
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: ros2workloads.robot.roboscale.io
spec:
  group: robot.roboscale.io
  names:
    kind: ROS2Workload
    listKind: ROS2WorkloadList
    plural: ros2workloads
    singular: ros2workload
  scope: Namespaced
  versions:
    - name: v1alpha2
      schema:
        openAPIV3Schema:
          description: ROS2Workload is the Schema for the ros2workloads API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired behavior of the ROS2Workload.
              properties:
                discoveryServerTemplate:
                  description: Discovery server configurational parameters.
                  properties:
                    cluster:
                      description: Cloud instance name that holds DiscoveryServer instance with `Server` type. Should be empty if the type is `Server` since it takes cloud instance's name automatically. Should be set if the type is `Client`.
                      type: string
                    domainID:
                      description: ROS domain ID for robot. See https://docs.ros.org/en/foxy/Concepts/About-Domain-ID.html.
                      maximum: 101
                      minimum: 0
                      type: integer
                    hostname:
                      description: If instance type is `Server`, it can be an arbitrary value. If instance type is `Client`, it should be the same with Server's hostname. Used for getting Server's IP over DNS.
                      type: string
                    protocol:
                      enum:
                        - TCP
                        - UDP
                      type: string
                    reference:
                      description: Reference to the `Server` instance. It is used if `.spec.type` is `Client`. Referenced object can be previously provisioned in another cluster. In that case, cluster's name can be specified in `.spec.cluster` field.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    subdomain:
                      description: If instance type is `Server`, it can be an arbitrary value. If instance type is `Client`, it should be the same with Server's subdomain. Used for getting Server's IP over DNS.
                      type: string
                    type:
                      description: Instance type can be either `Server` or `Client`. If `Server`, instance creates discovery server resources and workloads. Other `Client` instances can connect to the `Server` instance. If `Client`, instance tries to connect a `Server` instance and hold `Server` configuration in a ConfigMap.
                      type: string
                  required:
                    - domainID
                  type: object
                launchContainers:
                  description: Configurational parameters for containers that will be encapsulated within the ROS 2 workload StatefulSet.
                  items:
                    properties:
                      container:
                        description: Single container configuration for stateful set.
                        properties:
                          args:
                            description: 'Arguments to the entrypoint. The container image''s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
                            items:
                              type: string
                            type: array
                          command:
                            description: 'Entrypoint array. Not executed within a shell. The container image''s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
                            items:
                              type: string
                            type: array
                          env:
                            description: List of environment variables to set in the container. Cannot be updated.
                            items:
                              description: EnvVar represents an environment variable present in a Container.
                              properties:
                                name:
                                  description: Name of the environment variable. Must be a C_IDENTIFIER.
                                  type: string
                                value:
                                  description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                                  type: string
                                valueFrom:
                                  description: Source for the environment variable's value. Cannot be used if value is not empty.
                                  properties:
                                    configMapKeyRef:
                                      description: Selects a key of a ConfigMap.
                                      properties:
                                        key:
                                          description: The key to select.
                                          type: string
                                        name:
                                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                          type: string
                                        optional:
                                          description: Specify whether the ConfigMap or its key must be defined
                                          type: boolean
                                      required:
                                        - key
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    fieldRef:
                                      description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                                      properties:
                                        apiVersion:
                                          description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                          type: string
                                        fieldPath:
                                          description: Path of the field to select in the specified API version.
                                          type: string
                                      required:
                                        - fieldPath
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    resourceFieldRef:
                                      description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                                      properties:
                                        containerName:
                                          description: 'Container name: required for volumes, optional for env vars'
                                          type: string
                                        divisor:
                                          anyOf:
                                            - type: integer
                                            - type: string
                                          description: Specifies the output format of the exposed resources, defaults to "1"
                                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                          x-kubernetes-int-or-string: true
                                        resource:
                                          description: 'Required: resource to select'
                                          type: string
                                      required:
                                        - resource
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    secretKeyRef:
                                      description: Selects a key of a secret in the pod's namespace
                                      properties:
                                        key:
                                          description: The key of the secret to select from.  Must be a valid secret key.
                                          type: string
                                        name:
                                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                          type: string
                                        optional:
                                          description: Specify whether the Secret or its key must be defined
                                          type: boolean
                                      required:
                                        - key
                                      type: object
                                      x-kubernetes-map-type: atomic
                                  type: object
                              required:
                                - name
                              type: object
                            type: array
                          envFrom:
                            description: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
                            items:
                              description: EnvFromSource represents the source of a set of ConfigMaps
                              properties:
                                configMapRef:
                                  description: The ConfigMap to select from
                                  properties:
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                      type: string
                                    optional:
                                      description: Specify whether the ConfigMap must be defined
                                      type: boolean
                                  type: object
                                  x-kubernetes-map-type: atomic
                                prefix:
                                  description: An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                                  type: string
                                secretRef:
                                  description: The Secret to select from
                                  properties:
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                      type: string
                                    optional:
                                      description: Specify whether the Secret must be defined
                                      type: boolean
                                  type: object
                                  x-kubernetes-map-type: atomic
                              type: object
                            type: array
                          image:
                            description: 'Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.'
                            type: string
                          imagePullPolicy:
                            description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                            type: string
                          lifecycle:
                            description: Actions that the management system should take in response to container lifecycle events. Cannot be updated.
                            properties:
                              postStart:
                                description: 'PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
                                properties:
                                  exec:
                                    description: Exec specifies the action to take.
                                    properties:
                                      command:
                                        description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                        items:
                                          type: string
                                        type: array
                                    type: object
                                  httpGet:
                                    description: HTTPGet specifies the http request to perform.
                                    properties:
                                      host:
                                        description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                                        type: string
                                      httpHeaders:
                                        description: Custom headers to set in the request. HTTP allows repeated headers.
                                        items:
                                          description: HTTPHeader describes a custom header to be used in HTTP probes
                                          properties:
                                            name:
                                              description: The header field name
                                              type: string
                                            value:
                                              description: The header field value
                                              type: string
                                          required:
                                            - name
                                            - value
                                          type: object
                                        type: array
                                      path:
                                        description: Path to access on the HTTP server.
                                        type: string
                                      port:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                        x-kubernetes-int-or-string: true
                                      scheme:
                                        description: Scheme to use for connecting to the host. Defaults to HTTP.
                                        type: string
                                    required:
                                      - port
                                    type: object
                                  tcpSocket:
                                    description: Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
                                    properties:
                                      host:
                                        description: 'Optional: Host name to connect to, defaults to the pod IP.'
                                        type: string
                                      port:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                        x-kubernetes-int-or-string: true
                                    required:
                                      - port
                                    type: object
                                type: object
                              preStop:
                                description: 'PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod''s termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod''s termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
                                properties:
                                  exec:
                                    description: Exec specifies the action to take.
                                    properties:
                                      command:
                                        description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                        items:
                                          type: string
                                        type: array
                                    type: object
                                  httpGet:
                                    description: HTTPGet specifies the http request to perform.
                                    properties:
                                      host:
                                        description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                                        type: string
                                      httpHeaders:
                                        description: Custom headers to set in the request. HTTP allows repeated headers.
                                        items:
                                          description: HTTPHeader describes a custom header to be used in HTTP probes
                                          properties:
                                            name:
                                              description: The header field name
                                              type: string
                                            value:
                                              description: The header field value
                                              type: string
                                          required:
                                            - name
                                            - value
                                          type: object
                                        type: array
                                      path:
                                        description: Path to access on the HTTP server.
                                        type: string
                                      port:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                        x-kubernetes-int-or-string: true
                                      scheme:
                                        description: Scheme to use for connecting to the host. Defaults to HTTP.
                                        type: string
                                    required:
                                      - port
                                    type: object
                                  tcpSocket:
                                    description: Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
                                    properties:
                                      host:
                                        description: 'Optional: Host name to connect to, defaults to the pod IP.'
                                        type: string
                                      port:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                        x-kubernetes-int-or-string: true
                                    required:
                                      - port
                                    type: object
                                type: object
                            type: object
                          livenessProbe:
                            description: 'Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                            properties:
                              exec:
                                description: Exec specifies the action to take.
                                properties:
                                  command:
                                    description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                    items:
                                      type: string
                                    type: array
                                type: object
                              failureThreshold:
                                description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                                format: int32
                                type: integer
                              grpc:
                                description: GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
                                properties:
                                  port:
                                    description: Port number of the gRPC service. Number must be in the range 1 to 65535.
                                    format: int32
                                    type: integer
                                  service:
                                    description: "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC."
                                    type: string
                                required:
                                  - port
                                type: object
                              httpGet:
                                description: HTTPGet specifies the http request to perform.
                                properties:
                                  host:
                                    description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                                    type: string
                                  httpHeaders:
                                    description: Custom headers to set in the request. HTTP allows repeated headers.
                                    items:
                                      description: HTTPHeader describes a custom header to be used in HTTP probes
                                      properties:
                                        name:
                                          description: The header field name
                                          type: string
                                        value:
                                          description: The header field value
                                          type: string
                                      required:
                                        - name
                                        - value
                                      type: object
                                    type: array
                                  path:
                                    description: Path to access on the HTTP server.
                                    type: string
                                  port:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                    x-kubernetes-int-or-string: true
                                  scheme:
                                    description: Scheme to use for connecting to the host. Defaults to HTTP.
                                    type: string
                                required:
                                  - port
                                type: object
                              initialDelaySeconds:
                                description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                                format: int32
                                type: integer
                              periodSeconds:
                                description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                                format: int32
                                type: integer
                              successThreshold:
                                description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                format: int32
                                type: integer
                              tcpSocket:
                                description: TCPSocket specifies an action involving a TCP port.
                                properties:
                                  host:
                                    description: 'Optional: Host name to connect to, defaults to the pod IP.'
                                    type: string
                                  port:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              terminationGracePeriodSeconds:
                                description: Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                                format: int64
                                type: integer
                              timeoutSeconds:
                                description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                                format: int32
                                type: integer
                            type: object
                          name:
                            description: Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
                            type: string
                          ports:
                            description: List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
                            items:
                              description: ContainerPort represents a network port in a single container.
                              properties:
                                containerPort:
                                  description: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
                                  format: int32
                                  type: integer
                                hostIP:
                                  description: What host IP to bind the external port to.
                                  type: string
                                hostPort:
                                  description: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
                                  format: int32
                                  type: integer
                                name:
                                  description: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
                                  type: string
                                protocol:
                                  default: TCP
                                  description: Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
                                  type: string
                              required:
                                - containerPort
                              type: object
                            type: array
                            x-kubernetes-list-map-keys:
                              - containerPort
                              - protocol
                            x-kubernetes-list-type: map
                          readinessProbe:
                            description: 'Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                            properties:
                              exec:
                                description: Exec specifies the action to take.
                                properties:
                                  command:
                                    description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                    items:
                                      type: string
                                    type: array
                                type: object
                              failureThreshold:
                                description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                                format: int32
                                type: integer
                              grpc:
                                description: GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
                                properties:
                                  port:
                                    description: Port number of the gRPC service. Number must be in the range 1 to 65535.
                                    format: int32
                                    type: integer
                                  service:
                                    description: "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC."
                                    type: string
                                required:
                                  - port
                                type: object
                              httpGet:
                                description: HTTPGet specifies the http request to perform.
                                properties:
                                  host:
                                    description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                                    type: string
                                  httpHeaders:
                                    description: Custom headers to set in the request. HTTP allows repeated headers.
                                    items:
                                      description: HTTPHeader describes a custom header to be used in HTTP probes
                                      properties:
                                        name:
                                          description: The header field name
                                          type: string
                                        value:
                                          description: The header field value
                                          type: string
                                      required:
                                        - name
                                        - value
                                      type: object
                                    type: array
                                  path:
                                    description: Path to access on the HTTP server.
                                    type: string
                                  port:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                    x-kubernetes-int-or-string: true
                                  scheme:
                                    description: Scheme to use for connecting to the host. Defaults to HTTP.
                                    type: string
                                required:
                                  - port
                                type: object
                              initialDelaySeconds:
                                description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                                format: int32
                                type: integer
                              periodSeconds:
                                description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                                format: int32
                                type: integer
                              successThreshold:
                                description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                format: int32
                                type: integer
                              tcpSocket:
                                description: TCPSocket specifies an action involving a TCP port.
                                properties:
                                  host:
                                    description: 'Optional: Host name to connect to, defaults to the pod IP.'
                                    type: string
                                  port:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              terminationGracePeriodSeconds:
                                description: Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                                format: int64
                                type: integer
                              timeoutSeconds:
                                description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                                format: int32
                                type: integer
                            type: object
                          resources:
                            description: 'Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            properties:
                              claims:
                                description: "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable."
                                items:
                                  description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                                  properties:
                                    name:
                                      description: Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
                                      type: string
                                  required:
                                    - name
                                  type: object
                                type: array
                                x-kubernetes-list-map-keys:
                                  - name
                                x-kubernetes-list-type: map
                              limits:
                                additionalProperties:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                              requests:
                                additionalProperties:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                            type: object
                          securityContext:
                            description: 'SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/'
                            properties:
                              allowPrivilegeEscalation:
                                description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.'
                                type: boolean
                              capabilities:
                                description: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
                                properties:
                                  add:
                                    description: Added capabilities
                                    items:
                                      description: Capability represent POSIX capabilities type
                                      type: string
                                    type: array
                                  drop:
                                    description: Removed capabilities
                                    items:
                                      description: Capability represent POSIX capabilities type
                                      type: string
                                    type: array
                                type: object
                              privileged:
                                description: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
                                type: boolean
                              procMount:
                                description: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
                                type: string
                              readOnlyRootFilesystem:
                                description: Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
                                type: boolean
                              runAsGroup:
                                description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                                format: int64
                                type: integer
                              runAsNonRoot:
                                description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                                type: boolean
                              runAsUser:
                                description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                                format: int64
                                type: integer
                              seLinuxOptions:
                                description: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                                properties:
                                  level:
                                    description: Level is SELinux level label that applies to the container.
                                    type: string
                                  role:
                                    description: Role is a SELinux role label that applies to the container.
                                    type: string
                                  type:
                                    description: Type is a SELinux type label that applies to the container.
                                    type: string
                                  user:
                                    description: User is a SELinux user label that applies to the container.
                                    type: string
                                type: object
                              seccompProfile:
                                description: The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
                                properties:
                                  localhostProfile:
                                    description: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
                                    type: string
                                  type:
                                    description: "type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied."
                                    type: string
                                required:
                                  - type
                                type: object
                              windowsOptions:
                                description: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
                                properties:
                                  gmsaCredentialSpec:
                                    description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
                                    type: string
                                  gmsaCredentialSpecName:
                                    description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
                                    type: string
                                  hostProcess:
                                    description: HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
                                    type: boolean
                                  runAsUserName:
                                    description: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                                    type: string
                                type: object
                            type: object
                          startupProbe:
                            description: 'StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod''s lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                            properties:
                              exec:
                                description: Exec specifies the action to take.
                                properties:
                                  command:
                                    description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                    items:
                                      type: string
                                    type: array
                                type: object
                              failureThreshold:
                                description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                                format: int32
                                type: integer
                              grpc:
                                description: GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
                                properties:
                                  port:
                                    description: Port number of the gRPC service. Number must be in the range 1 to 65535.
                                    format: int32
                                    type: integer
                                  service:
                                    description: "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC."
                                    type: string
                                required:
                                  - port
                                type: object
                              httpGet:
                                description: HTTPGet specifies the http request to perform.
                                properties:
                                  host:
                                    description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                                    type: string
                                  httpHeaders:
                                    description: Custom headers to set in the request. HTTP allows repeated headers.
                                    items:
                                      description: HTTPHeader describes a custom header to be used in HTTP probes
                                      properties:
                                        name:
                                          description: The header field name
                                          type: string
                                        value:
                                          description: The header field value
                                          type: string
                                      required:
                                        - name
                                        - value
                                      type: object
                                    type: array
                                  path:
                                    description: Path to access on the HTTP server.
                                    type: string
                                  port:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                    x-kubernetes-int-or-string: true
                                  scheme:
                                    description: Scheme to use for connecting to the host. Defaults to HTTP.
                                    type: string
                                required:
                                  - port
                                type: object
                              initialDelaySeconds:
                                description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                                format: int32
                                type: integer
                              periodSeconds:
                                description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                                format: int32
                                type: integer
                              successThreshold:
                                description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                format: int32
                                type: integer
                              tcpSocket:
                                description: TCPSocket specifies an action involving a TCP port.
                                properties:
                                  host:
                                    description: 'Optional: Host name to connect to, defaults to the pod IP.'
                                    type: string
                                  port:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                    x-kubernetes-int-or-string: true
                                required:
                                  - port
                                type: object
                              terminationGracePeriodSeconds:
                                description: Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                                format: int64
                                type: integer
                              timeoutSeconds:
                                description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                                format: int32
                                type: integer
                            type: object
                          stdin:
                            description: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
                            type: boolean
                          stdinOnce:
                            description: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
                            type: boolean
                          terminationMessagePath:
                            description: 'Optional: Path at which the file to which the container''s termination message will be written is mounted into the container''s filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.'
                            type: string
                          terminationMessagePolicy:
                            description: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
                            type: string
                          tty:
                            description: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
                            type: boolean
                          volumeDevices:
                            description: volumeDevices is the list of block devices to be used by the container.
                            items:
                              description: volumeDevice describes a mapping of a raw block device within a container.
                              properties:
                                devicePath:
                                  description: devicePath is the path inside of the container that the device will be mapped to.
                                  type: string
                                name:
                                  description: name must match the name of a persistentVolumeClaim in the pod
                                  type: string
                              required:
                                - devicePath
                                - name
                              type: object
                            type: array
                          volumeMounts:
                            description: Pod volumes to mount into the container's filesystem. Cannot be updated.
                            items:
                              description: VolumeMount describes a mounting of a Volume within a container.
                              properties:
                                mountPath:
                                  description: Path within the container at which the volume should be mounted.  Must not contain ':'.
                                  type: string
                                mountPropagation:
                                  description: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
                                  type: string
                                name:
                                  description: This must match the Name of a Volume.
                                  type: string
                                readOnly:
                                  description: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
                                  type: boolean
                                subPath:
                                  description: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
                                  type: string
                                subPathExpr:
                                  description: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
                                  type: string
                              required:
                                - mountPath
                                - name
                              type: object
                            type: array
                          workingDir:
                            description: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
                            type: string
                        required:
                          - name
                        type: object
                      replicas:
                        description: Replica number of the stateful set.
                        format: int32
                        type: integer
                    required:
                      - replicas
                    type: object
                  type: array
                ros2BridgeTemplate:
                  description: ROS 2 Bridge configurational parameters.
                  properties:
                    discoveryServerRef:
                      description: Object reference to DiscoveryServer.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    distro:
                      description: Configurational parameters for ROS 2 bridge.
                      enum:
                        - foxy
                        - galactic
                        - humble
                      type: string
                    ingress:
                      description: ROS2Bridge will create an Ingress resource if `true`.
                      type: boolean
                    serviceType:
                      default: ClusterIP
                      description: Service type of ROS2Bridge. `ClusterIP` and `NodePort` is supported.
                      enum:
                        - ClusterIP
                        - NodePort
                      type: string
                    tlsSecretName:
                      description: Name of the TLS secret.
                      type: string
                  required:
                    - distro
                  type: object
                volumeClaimTemplates:
                  description: Volume templates for ROS 2 workload. For each volume template, operator will create a PersistentVolumeClaim that can be mounted to the ROS 2 workload.
                  items:
                    description: PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
                    properties:
                      metadata:
                        description: May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
                        type: object
                      spec:
                        description: The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
                        properties:
                          accessModes:
                            description: 'accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          dataSource:
                            description: 'dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                            required:
                              - kind
                              - name
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSourceRef:
                            description: 'dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn''t specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn''t set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                              namespace:
                                description: Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                type: string
                            required:
                              - kind
                              - name
                            type: object
                          resources:
                            description: 'resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                            properties:
                              claims:
                                description: "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable."
                                items:
                                  description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                                  properties:
                                    name:
                                      description: Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
                                      type: string
                                  required:
                                    - name
                                  type: object
                                type: array
                                x-kubernetes-list-map-keys:
                                  - name
                                x-kubernetes-list-type: map
                              limits:
                                additionalProperties:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                              requests:
                                additionalProperties:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                            type: object
                          selector:
                            description: selector is a label query over volumes to consider for binding.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                    - key
                                    - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          storageClassName:
                            description: 'storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                            type: string
                          volumeMode:
                            description: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
                            type: string
                          volumeName:
                            description: volumeName is the binding reference to the PersistentVolume backing this claim.
                            type: string
                        type: object
                    required:
                      - spec
                    type: object
                  type: array
              required:
                - discoveryServerTemplate
              type: object
            status:
              description: Most recently observed status of the ROS2Workload.
              properties:
                discoveryServerStatus:
                  description: Discovery server instance status.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    status:
                      description: Status of the DiscoveryServer instance.
                      properties:
                        configMapStatus:
                          description: Status of the DiscoveryServer config map.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                        connectionInfo:
                          description: Connection information.
                          properties:
                            configMapName:
                              description: Name of the config map that holds discovery server configuration.
                              type: string
                            ip:
                              description: IP of the discovery server. IP is being obtained from the DNS name, which is being built according to the discovery server configuration.
                              type: string
                            uri:
                              description: URI of the discovery server. Discovery server instance tries to ping this address to see if it's reachable.
                              type: string
                          type: object
                        phase:
                          description: Phase of the DiscoveryServer.
                          type: string
                        podStatus:
                          description: Status of the DiscoveryServer pod.
                          properties:
                            ip:
                              description: IP of the pod.
                              type: string
                            resource:
                              description: Generic status for any owned resource.
                              properties:
                                created:
                                  description: Shows if the owned resource is created.
                                  type: boolean
                                phase:
                                  description: Phase of the owned resource.
                                  type: string
                                reference:
                                  description: Reference to the owned resource.
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                                - created
                              type: object
                          type: object
                        serviceExportStatus:
                          description: Status of the DiscoveryServer ServiceExport.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                        serviceStatus:
                          description: Status of the DiscoveryServer service.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                      type: object
                  type: object
                phase:
                  description: Phase of ROS2Workload. It sums the general status of ROS 2 workload(s).
                  type: string
                pvcStatuses:
                  description: Statuses of owned PersistentVolumeClaims.
                  items:
                    properties:
                      resource:
                        description: Generic status for any owned resource.
                        properties:
                          created:
                            description: Shows if the owned resource is created.
                            type: boolean
                          phase:
                            description: Phase of the owned resource.
                            type: string
                          reference:
                            description: Reference to the owned resource.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                          - created
                        type: object
                      status:
                        description: Status of the ROS2Bridge instance.
                        properties:
                          accessModes:
                            description: 'accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          allocatedResources:
                            additionalProperties:
                              anyOf:
                                - type: integer
                                - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
                            type: object
                          capacity:
                            additionalProperties:
                              anyOf:
                                - type: integer
                                - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: capacity represents the actual resources of the underlying volume.
                            type: object
                          conditions:
                            description: conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
                            items:
                              description: PersistentVolumeClaimCondition contails details about state of pvc
                              properties:
                                lastProbeTime:
                                  description: lastProbeTime is the time we probed the condition.
                                  format: date-time
                                  type: string
                                lastTransitionTime:
                                  description: lastTransitionTime is the time the condition transitioned from one status to another.
                                  format: date-time
                                  type: string
                                message:
                                  description: message is the human-readable message indicating details about last transition.
                                  type: string
                                reason:
                                  description: reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
                                  type: string
                                status:
                                  type: string
                                type:
                                  description: PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
                                  type: string
                              required:
                                - status
                                - type
                              type: object
                            type: array
                          phase:
                            description: phase represents the current phase of PersistentVolumeClaim.
                            type: string
                          resizeStatus:
                            description: resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
                            type: string
                        type: object
                    type: object
                  type: array
                ros2BridgeStatus:
                  description: ROS 2 Bridge instance status.
                  properties:
                    connection:
                      description: Address of the robot service that can be reached from outside.
                      type: string
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    status:
                      description: Status of the ROS2Bridge instance.
                      properties:
                        connectionInfo:
                          description: Connection info obtained from DiscoveryServer.
                          properties:
                            configMapName:
                              description: Name of the config map that holds discovery server configuration.
                              type: string
                            ip:
                              description: IP of the discovery server. IP is being obtained from the DNS name, which is being built according to the discovery server configuration.
                              type: string
                            uri:
                              description: URI of the discovery server. Discovery server instance tries to ping this address to see if it's reachable.
                              type: string
                          type: object
                        ingressStatus:
                          description: Status of ROS2Bridge Ingress.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                        phase:
                          description: Phase of ROS2Bridge.
                          type: string
                        podStatus:
                          description: Status of ROS2Bridge pod.
                          properties:
                            created:
                              description: Shows if the owned resource is created.
                              type: boolean
                            phase:
                              description: Phase of the owned resource.
                              type: string
                            reference:
                              description: Reference to the owned resource.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                fieldPath:
                                  description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                  type: string
                                resourceVersion:
                                  description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          required:
                            - created
                          type: object
                        serviceStatus:
                          description: Status of ROS2Bridge service.
                          properties:
                            resource:
                              description: Generic status for any owned resource.
                              properties:
                                created:
                                  description: Shows if the owned resource is created.
                                  type: boolean
                                phase:
                                  description: Phase of the owned resource.
                                  type: string
                                reference:
                                  description: Reference to the owned resource.
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                                - created
                              type: object
                            urls:
                              additionalProperties:
                                type: string
                              description: Connection URL.
                              type: object
                          type: object
                      type: object
                  type: object
                statefulSetStatuses:
                  description: Status of owned StatefulSet and containers.
                  items:
                    properties:
                      containerStatuses:
                        description: Container statuses.
                        items:
                          description: ContainerStatus contains details for the current status of this container.
                          properties:
                            containerID:
                              description: Container's ID in the format '<type>://<container_id>'.
                              type: string
                            image:
                              description: 'The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.'
                              type: string
                            imageID:
                              description: ImageID of the container's image.
                              type: string
                            lastState:
                              description: Details about the container's last termination condition.
                              properties:
                                running:
                                  description: Details about a running container
                                  properties:
                                    startedAt:
                                      description: Time at which the container was last (re-)started
                                      format: date-time
                                      type: string
                                  type: object
                                terminated:
                                  description: Details about a terminated container
                                  properties:
                                    containerID:
                                      description: Container's ID in the format '<type>://<container_id>'
                                      type: string
                                    exitCode:
                                      description: Exit status from the last termination of the container
                                      format: int32
                                      type: integer
                                    finishedAt:
                                      description: Time at which the container last terminated
                                      format: date-time
                                      type: string
                                    message:
                                      description: Message regarding the last termination of the container
                                      type: string
                                    reason:
                                      description: (brief) reason from the last termination of the container
                                      type: string
                                    signal:
                                      description: Signal from the last termination of the container
                                      format: int32
                                      type: integer
                                    startedAt:
                                      description: Time at which previous execution of the container started
                                      format: date-time
                                      type: string
                                  required:
                                    - exitCode
                                  type: object
                                waiting:
                                  description: Details about a waiting container
                                  properties:
                                    message:
                                      description: Message regarding why the container is not yet running.
                                      type: string
                                    reason:
                                      description: (brief) reason the container is not yet running.
                                      type: string
                                  type: object
                              type: object
                            name:
                              description: This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
                              type: string
                            ready:
                              description: Specifies whether the container has passed its readiness probe.
                              type: boolean
                            restartCount:
                              description: The number of times the container has been restarted.
                              format: int32
                              type: integer
                            started:
                              description: Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
                              type: boolean
                            state:
                              description: Details about the container's current condition.
                              properties:
                                running:
                                  description: Details about a running container
                                  properties:
                                    startedAt:
                                      description: Time at which the container was last (re-)started
                                      format: date-time
                                      type: string
                                  type: object
                                terminated:
                                  description: Details about a terminated container
                                  properties:
                                    containerID:
                                      description: Container's ID in the format '<type>://<container_id>'
                                      type: string
                                    exitCode:
                                      description: Exit status from the last termination of the container
                                      format: int32
                                      type: integer
                                    finishedAt:
                                      description: Time at which the container last terminated
                                      format: date-time
                                      type: string
                                    message:
                                      description: Message regarding the last termination of the container
                                      type: string
                                    reason:
                                      description: (brief) reason from the last termination of the container
                                      type: string
                                    signal:
                                      description: Signal from the last termination of the container
                                      format: int32
                                      type: integer
                                    startedAt:
                                      description: Time at which previous execution of the container started
                                      format: date-time
                                      type: string
                                  required:
                                    - exitCode
                                  type: object
                                waiting:
                                  description: Details about a waiting container
                                  properties:
                                    message:
                                      description: Message regarding why the container is not yet running.
                                      type: string
                                    reason:
                                      description: (brief) reason the container is not yet running.
                                      type: string
                                  type: object
                              type: object
                          required:
                            - image
                            - imageID
                            - name
                            - ready
                            - restartCount
                          type: object
                        type: array
                      resource:
                        description: Generic status for any owned resource.
                        properties:
                          created:
                            description: Shows if the owned resource is created.
                            type: boolean
                          phase:
                            description: Phase of the owned resource.
                            type: string
                          reference:
                            description: Reference to the owned resource.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                          - created
                        type: object
                      status:
                        description: Status of the StatefulSet.
                        properties:
                          availableReplicas:
                            description: Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.
                            format: int32
                            type: integer
                          collisionCount:
                            description: collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
                            format: int32
                            type: integer
                          conditions:
                            description: Represents the latest available observations of a statefulset's current state.
                            items:
                              description: StatefulSetCondition describes the state of a statefulset at a certain point.
                              properties:
                                lastTransitionTime:
                                  description: Last time the condition transitioned from one status to another.
                                  format: date-time
                                  type: string
                                message:
                                  description: A human readable message indicating details about the transition.
                                  type: string
                                reason:
                                  description: The reason for the condition's last transition.
                                  type: string
                                status:
                                  description: Status of the condition, one of True, False, Unknown.
                                  type: string
                                type:
                                  description: Type of statefulset condition.
                                  type: string
                              required:
                                - status
                                - type
                              type: object
                            type: array
                          currentReplicas:
                            description: currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
                            format: int32
                            type: integer
                          currentRevision:
                            description: currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
                            type: string
                          observedGeneration:
                            description: observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
                            format: int64
                            type: integer
                          readyReplicas:
                            description: readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.
                            format: int32
                            type: integer
                          replicas:
                            description: replicas is the number of Pods created by the StatefulSet controller.
                            format: int32
                            type: integer
                          updateRevision:
                            description: updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
                            type: string
                          updatedReplicas:
                            description: updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
                            format: int32
                            type: integer
                        required:
                          - replicas
                        type: object
                    type: object
                  type: array
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: rosbridges.robot.roboscale.io
spec:
  group: robot.roboscale.io
  names:
    kind: ROSBridge
    listKind: ROSBridgeList
    plural: rosbridges
    singular: rosbridge
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.phase
          name: Phase
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ROSBridge is a custom resource that provisions ROS/2 bridge resources and workloads. It could also convert ROS 2 topics to ROS topics using ROS 1 to 2 bridge. (see https://github.com/ros2/ros1_bridge)
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired behavior of the ROSBridge.
              properties:
                distro:
                  description: Configurational parameters for ROS 2 bridge.
                  enum:
                    - foxy
                    - galactic
                    - humble
                  type: string
                ingress:
                  description: '[*alpha*] ROSBridge will create an Ingress resource if `true`.'
                  type: boolean
                serviceType:
                  description: Service type of ROSBridge. `ClusterIP` and `NodePort` is supported.
                  enum:
                    - ClusterIP
                    - NodePort
                  type: string
              type: object
            status:
              description: Most recently observed status of the ROSBridge.
              properties:
                ingressStatus:
                  description: Status of ROSBridge Ingress.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                phase:
                  description: Phase of ROSBridge.
                  type: string
                podStatus:
                  description: Status of ROSBridge pod.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                serviceStatus:
                  description: Status of ROSBridge service.
                  properties:
                    resource:
                      description: Generic status for any owned resource.
                      properties:
                        created:
                          description: Shows if the owned resource is created.
                          type: boolean
                        phase:
                          description: Phase of the owned resource.
                          type: string
                        reference:
                          description: Reference to the owned resource.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                        - created
                      type: object
                    urls:
                      additionalProperties:
                        type: string
                      description: Connection URL.
                      type: object
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: serviceexports.multicluster.x-k8s.io
spec:
  group: multicluster.x-k8s.io
  names:
    kind: ServiceExport
    listKind: ServiceExportList
    plural: serviceexports
    singular: serviceexport
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ServiceExport declares that the Service with the same name and namespace as this export should be consumable from other clusters.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            status:
              description: status describes the current state of an exported service. Service configuration comes from the Service that had the same name and namespace as this ServiceExport. Populated by the multi-cluster service implementation's controller.
              properties:
                conditions:
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                    - type
                  x-kubernetes-list-type: map
              type: object
          type: object
      served: true
      storage: true
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: serviceimports.multicluster.x-k8s.io
spec:
  group: multicluster.x-k8s.io
  names:
    kind: ServiceImport
    listKind: ServiceImportList
    plural: serviceimports
    singular: serviceimport
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ServiceImport describes a service imported from clusters in a ClusterSet.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: spec defines the behavior of a ServiceImport.
              properties:
                ips:
                  description: ip will be used as the VIP for this service when type is ClusterSetIP.
                  items:
                    type: string
                  maxItems: 1
                  type: array
                ports:
                  items:
                    description: ServicePort represents the port on which the service is exposed
                    properties:
                      appProtocol:
                        description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate.
                        type: string
                      name:
                        description: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                        type: string
                      port:
                        description: The port that will be exposed by this service.
                        format: int32
                        type: integer
                      protocol:
                        default: TCP
                        description: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                        type: string
                    required:
                      - port
                    type: object
                  type: array
                  x-kubernetes-list-type: atomic
                sessionAffinity:
                  description: 'Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. Ignored when type is Headless More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                  type: string
                sessionAffinityConfig:
                  description: sessionAffinityConfig contains session affinity configuration.
                  properties:
                    clientIP:
                      description: clientIP contains the configurations of Client IP based session affinity.
                      properties:
                        timeoutSeconds:
                          description: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                          format: int32
                          type: integer
                      type: object
                  type: object
                type:
                  description: type defines the type of this service. Must be ClusterSetIP or Headless.
                  enum:
                    - ClusterSetIP
                    - Headless
                  type: string
              required:
                - ports
                - type
              type: object
            status:
              description: status contains information about the exported services that form the multi-cluster service referenced by this ServiceImport.
              properties:
                clusters:
                  description: clusters is the list of exporting clusters from which this service was derived.
                  items:
                    description: ClusterStatus contains service configuration mapped to a specific source cluster
                    properties:
                      cluster:
                        description: cluster is the name of the exporting cluster. Must be a valid RFC-1123 DNS label.
                        type: string
                    required:
                      - cluster
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                    - cluster
                  x-kubernetes-list-type: map
              type: object
          type: object
      served: true
      storage: true
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: robot-system/robot-serving-cert
    controller-gen.kubebuilder.io/version: v0.9.2
  name: workspacemanagers.robot.roboscale.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: robot-webhook-service
          namespace: robot-system
          path: /convert
      conversionReviewVersions:
        - v1
  group: robot.roboscale.io
  names:
    kind: WorkspaceManager
    listKind: WorkspaceManagerList
    plural: workspacemanagers
    singular: workspacemanager
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.workspacesPath
          name: Path
          type: string
        - jsonPath: .spec.workspaces[].name
          name: Workspaces
          type: string
        - jsonPath: .status.phase
          name: Phase
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: WorkspaceManager configures the ROS 2 workspaces and repositories by executing Kubernetes jobs.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired behavior of the WorkspaceManager.
              properties:
                updateNeeded:
                  description: WorkspaceManager is triggered if this field is set to `true`. Then the workspaces are being configured again while backing up the old configurations. This field is often used by operator.
                  type: boolean
                workspaces:
                  description: Workspace definitions of robot. Multiple ROS 2 workspaces can be configured over this field.
                  items:
                    description: Workspace description. Each robot should contain at least one workspace. A workspace should contain at least one repository in it.
                    properties:
                      distro:
                        description: ROS 2 distribution selection. Currently supported distributions are Humble, Foxy, Galactic.
                        enum:
                          - foxy
                          - galactic
                          - humble
                        type: string
                      name:
                        description: Name of workspace. If a workspace's name is `my_ws`, it's absolute path is `/home/workspaces/my_ws`.
                        type: string
                      repositories:
                        additionalProperties:
                          description: Repository description.
                          properties:
                            branch:
                              description: Branch of the repository to clone.
                              type: string
                            hash:
                              description: '[*Autofilled*] Hash of last commit'
                              type: string
                            owner:
                              description: '[*Autofilled*] User or organization, maintainer of repository'
                              type: string
                            path:
                              description: '[*Autofilled*] Absolute path of repository'
                              type: string
                            repo:
                              description: '[*Autofilled*] Repository name'
                              type: string
                            url:
                              description: Base URL of the repository.
                              type: string
                          required:
                            - branch
                            - url
                          type: object
                        description: Repositories to clone inside workspace's `src` directory.
                        type: object
                    required:
                      - distro
                      - name
                      - repositories
                    type: object
                  minItems: 1
                  type: array
                workspacesPath:
                  description: Global path of workspaces. It's fixed to `/root/workspaces` path.
                  type: string
              type: object
            status:
              description: Most recently observed status of the WorkspaceManager.
              properties:
                cleanupJobStatus:
                  description: Status of cleanup jobs that runs while reconfiguring workspaces.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                clonerJobStatus:
                  description: Status of cloner job.
                  properties:
                    created:
                      description: Shows if the owned resource is created.
                      type: boolean
                    phase:
                      description: Phase of the owned resource.
                      type: string
                    reference:
                      description: Reference to the owned resource.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                    - created
                  type: object
                phase:
                  description: Phase of WorkspaceManager.
                  type: string
                version:
                  description: Incremental version of workspace configuration map. Used to determine changes in configuration.
                  type: integer
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kuberentes.io/instance: controller-manager
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: robot-operator
  name: robot-controller-manager
  namespace: robot-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: robot-operator
  name: robot-leader-election-role
  namespace: robot-system
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: robot-manager-role
rules:
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - persistentvolumeclaims
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - multicluster.x-k8s.io
    resources:
      - serviceexports
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - rolebindings
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - buildmanagers
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - buildmanagers/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - buildmanagers/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - codeeditors
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - codeeditors/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - codeeditors/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - discoveryservers
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - discoveryservers/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - discoveryservers/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - edgeproxies
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - edgeproxies/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - edgeproxies/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - launchmanagers
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - launchmanagers/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - launchmanagers/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - metricsexporters
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - metricsexporters/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - metricsexporters/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - notebooks
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - notebooks/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - notebooks/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - relayservers
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - relayservers/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - relayservers/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - robotdevsuites
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - robotdevsuites/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - robotdevsuites/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - robotides
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - robotides/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - robotides/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - robots
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - robots/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - robots/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - robotvdis
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - robotvdis/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - robotvdis/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - ros2bridges
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - ros2bridges/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - ros2bridges/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - ros2workloads
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - ros2workloads/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - ros2workloads/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - rosbridges
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - rosbridges/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - rosbridges/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - workspacemanagers
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - robot.roboscale.io
    resources:
      - workspacemanagers/finalizers
    verbs:
      - update
  - apiGroups:
      - robot.roboscale.io
    resources:
      - workspacemanagers/status
    verbs:
      - get
      - patch
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: metrics-reader
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: robot-operator
  name: robot-metrics-reader
rules:
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: proxy-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: robot-operator
  name: robot-proxy-role
rules:
  - apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
    verbs:
      - create
  - apiGroups:
      - authorization.k8s.io
    resources:
      - subjectaccessreviews
    verbs:
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: robot-operator
  name: robot-leader-election-rolebinding
  namespace: robot-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: robot-leader-election-role
subjects:
  - kind: ServiceAccount
    name: robot-controller-manager
    namespace: robot-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: robot-operator
  name: robot-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: robot-manager-role
subjects:
  - kind: ServiceAccount
    name: robot-controller-manager
    namespace: robot-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: proxy-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: robot-operator
  name: robot-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: robot-proxy-role
subjects:
  - kind: ServiceAccount
    name: robot-controller-manager
    namespace: robot-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: controller-manager-metrics-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: robot-operator
    control-plane: controller-manager
  name: robot-controller-manager-metrics-service
  namespace: robot-system
spec:
  ports:
    - name: https
      port: 8443
      protocol: TCP
      targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: webhook
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: webhook-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: robot-operator
  name: robot-webhook-service
  namespace: robot-system
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: 9443
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: robot-operator
    control-plane: controller-manager
  name: robot-controller-manager
  namespace: robot-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
                      - arm64
                      - ppc64le
                      - s390x
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
      containers:
        - args:
            - --secure-listen-address=0.0.0.0:8443
            - --upstream=http://127.0.0.1:8080/
            - --logtostderr=true
            - --v=0
          image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.0
          name: kube-rbac-proxy
          ports:
            - containerPort: 8443
              name: https
              protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 5m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
        - args:
            - --health-probe-bind-address=:8081
            - --metrics-bind-address=127.0.0.1:8080
            - --leader-elect
          command:
            - /manager
          image: robolaunchio/robot-controller-manager:v0.2.7-alpha.6.4
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 20
          name: manager
          ports:
            - containerPort: 9443
              name: webhook-server
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - mountPath: /tmp/k8s-webhook-server/serving-certs
              name: cert
              readOnly: true
      securityContext:
        runAsNonRoot: true
      serviceAccountName: robot-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: webhook-server-cert
      nodeSelector:
        robolaunch.io/organization: robolaunch
        robolaunch.io/team: robotics
        robolaunch.io/region: europe-east
        robolaunch.io/cloud-instance: cluster
        robolaunch.io/cloud-instance-alias: cluster-alias
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    app.kubernetes.io/component: certificate
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: serving-cert
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: certificate
    app.kubernetes.io/part-of: robot-operator
  name: robot-serving-cert
  namespace: robot-system
spec:
  dnsNames:
    - robot-webhook-service.robot-system.svc
    - robot-webhook-service.robot-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: robot-selfsigned-issuer
  secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    app.kuberentes.io/name: issuer
    app.kubernetes.io/component: certificate
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: selfsigned-issuer
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/part-of: robot-operator
  name: robot-selfsigned-issuer
  namespace: robot-system
spec:
  selfSigned: {}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: robot-system/robot-serving-cert
  labels:
    app.kubernetes.io/component: webhook
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: mutating-webhook-configuration
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: mutatingwebhookconfiguration
    app.kubernetes.io/part-of: robot-operator
  name: robot-mutating-webhook-configuration
webhooks:
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /mutate-robot-roboscale-io-v1alpha1-notebook
    failurePolicy: Fail
    name: mnotebook.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - notebooks
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /mutate-robot-roboscale-io-v1alpha1-robotide
    failurePolicy: Fail
    name: mrobotide.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - robotides
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /mutate-robot-roboscale-io-v1alpha1-robotvdi
    failurePolicy: Fail
    name: mrobotvdi.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - robotvdis
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /mutate-robot-roboscale-io-v1alpha1-robotdevsuite
    failurePolicy: Fail
    name: mrobotdevsuite.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - robotdevsuites
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /mutate-robot-roboscale-io-v1alpha1-workspacemanager
    failurePolicy: Fail
    name: mworkspacemanager.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - workspacemanagers
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /mutate-robot-roboscale-io-v1alpha1-buildmanager
    failurePolicy: Fail
    name: mbuildmanager.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - buildmanagers
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /mutate-robot-roboscale-io-v1alpha1-launchmanager
    failurePolicy: Fail
    name: mlaunchmanager.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - launchmanagers
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /mutate-robot-roboscale-io-v1alpha1-robot
    failurePolicy: Fail
    name: mrobot.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - robots
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /mutate-robot-roboscale-io-v1alpha1-discoveryserver
    failurePolicy: Fail
    name: mdiscoveryserver.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - discoveryservers
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /mutate-robot-roboscale-io-v1alpha2-ros2workload
    failurePolicy: Fail
    name: mros2workload.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - ros2workloads
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /mutate-robot-roboscale-io-v1alpha2-ros2bridge
    failurePolicy: Fail
    name: mros2bridge.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - ros2bridges
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /mutate-robot-roboscale-io-v1alpha2-codeeditor
    failurePolicy: Fail
    name: mcodeeditor.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - codeeditors
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /mutate-robot-roboscale-io-v1alpha2-edgeproxy
    failurePolicy: Fail
    name: medgeproxy.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - edgeproxies
    sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: robot-system/robot-serving-cert
  labels:
    app.kubernetes.io/component: webhook
    app.kubernetes.io/created-by: robot-operator
    app.kubernetes.io/instance: validating-webhook-configuration
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: validatingwebhookconfiguration
    app.kubernetes.io/part-of: robot-operator
  name: robot-validating-webhook-configuration
webhooks:
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /validate-robot-roboscale-io-v1alpha1-notebook
    failurePolicy: Fail
    name: vnotebook.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - notebooks
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /validate-robot-roboscale-io-v1alpha1-robotide
    failurePolicy: Fail
    name: vrobotide.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - robotides
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /validate-robot-roboscale-io-v1alpha1-robotvdi
    failurePolicy: Fail
    name: vrobotvdi.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - robotvdis
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /validate-robot-roboscale-io-v1alpha1-robotdevsuite
    failurePolicy: Fail
    name: vrobotdevsuite.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - robotdevsuites
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /validate-robot-roboscale-io-v1alpha1-workspacemanager
    failurePolicy: Fail
    name: vworkspacemanager.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - workspacemanagers
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /validate-robot-roboscale-io-v1alpha1-buildmanager
    failurePolicy: Fail
    name: vbuildmanager.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - buildmanagers
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /validate-robot-roboscale-io-v1alpha1-launchmanager
    failurePolicy: Fail
    name: vlaunchmanager.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - launchmanagers
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /validate-robot-roboscale-io-v1alpha1-robot
    failurePolicy: Fail
    name: vrobot.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - robots
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /validate-robot-roboscale-io-v1alpha1-discoveryserver
    failurePolicy: Fail
    name: vdiscoveryserver.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - discoveryservers
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /validate-robot-roboscale-io-v1alpha2-ros2workload
    failurePolicy: Fail
    name: vros2workload.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - ros2workloads
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /validate-robot-roboscale-io-v1alpha2-ros2bridge
    failurePolicy: Fail
    name: vros2bridge.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - ros2bridges
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /validate-robot-roboscale-io-v1alpha2-codeeditor
    failurePolicy: Fail
    name: vcodeeditor.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - codeeditors
    sideEffects: None
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: robot-webhook-service
        namespace: robot-system
        path: /validate-robot-roboscale-io-v1alpha2-edgeproxy
    failurePolicy: Fail
    name: vedgeproxy.kb.io
    rules:
      - apiGroups:
          - robot.roboscale.io
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - edgeproxies
    sideEffects: None
